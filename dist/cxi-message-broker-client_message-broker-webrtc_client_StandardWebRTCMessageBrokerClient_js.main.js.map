{"version":3,"file":"cxi-message-broker-client_message-broker-webrtc_client_StandardWebRTCMessageBrokerClient_js.main.js","mappingsnGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;;;AC9DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;;;ACnnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;;;ACrzYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;;;ACtkCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;;;ACxFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;;;ACjvtHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA","sources":["webpack://bottar-ai/./cxi-message-broker-client/message-broker-webrtc/client/AbstractWebRTCMessageBrokerClient.js","webpack://bottar-ai/./cxi-message-broker-client/message-broker-webrtc/client/RegistrationHolder.js","webpack://bottar-ai/./cxi-message-broker-client/message-broker-webrtc/client/StandardWebRTCMessageBrokerClient.js","webpack://bottar-ai/./cxi-message-broker-client/message-broker-webrtc/client/rest/HoldAuditTrailRestClient.js","webpack://bottar-ai/./cxi-message-broker-client/message-broker-webrtc/client/rest/RecordingAuditTrailRestClient.js","webpack://bottar-ai/./cxi-message-broker-client/message-broker-webrtc/interceptor/WebRTCBrokerInterceptorHandler.js","webpack://bottar-ai/./cxi-message-broker-client/message-broker-webrtc/interceptor/WebRTCBrokerInterceptorImpl.js","webpack://bottar-ai/./cxi-message-broker-client/message-broker-webrtc/janus/Event.js","webpack://bottar-ai/./cxi-message-broker-client/message-broker-webrtc/janus/Feed.js","webpack://bottar-ai/./cxi-message-broker-client/message-broker-webrtc/janus/JanusHandleHelper.js","webpack://bottar-ai/./cxi-message-broker-client/message-broker-webrtc/janus/JanusHandler.js","webpack://bottar-ai/./cxi-message-broker-client/message-broker-webrtc/janus/JanusWrapper.js","webpack://bottar-ai/./cxi-message-broker-client/message-broker-webrtc/janus/Room.js","webpack://bottar-ai/./cxi-message-broker-client/message-broker-webrtc/janus/Utils.js","webpack://bottar-ai/./cxi-message-broker-client/message-broker-webrtc/janus/VideoClient.js","webpack://bottar-ai/./cxi-message-broker-client/message-broker/client/ClientTypes.js","webpack://bottar-ai/./cxi-message-broker-client/message-broker/client/websocket/BrokerMessage.js","webpack://bottar-ai/./cxi-message-broker-client/message-broker/utils/ClientUtils.js"],"sourcesContent":["define([\"require\", \"exports\", \"./../interceptor/WebRTCBrokerInterceptorImpl\", \"./RegistrationHolder\", \"./../../message-broker/client/websocket/BrokerMessage\", \"./../../message-broker/client/ClientTypes\", \"./../janus/JanusHandler\", \"./../interceptor/WebRTCBrokerInterceptorHandler\", \"./rest/HoldAuditTrailRestClient\"], function (require, exports, WebRTCBrokerInterceptorImpl_1, RegistrationHolder_1, BrokerMessage_1, ClientTypes_1, JanusHandler_1, WebRTCBrokerInterceptorHandler_1, HoldAuditTrailRestClient_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.AbstractWebRTCMessageBrokerClient = void 0;\r\n    /**\r\n     * @abstract class to create web-rtc client.\r\n     * class is a wrapper of web-chat sdk @AbstractWSMessageBrokerClient\r\n     *\r\n     * invoke its constructor with @AbstractWSMessageBrokerClient and webrtc callback interface\r\n     * (@see @BrokerInterceptor) and\r\n     * @param showButtons(Optional), Default:true, If {true} Mute/UnMute Audio and Video buttons will be managed\r\n     * by SDK and client could only change its css only, If {false} client could provide its own Mute/UnMute Audio and Video buttons\r\n     * with its functionality.\r\n     */\r\n    class AbstractWebRTCMessageBrokerClient {\r\n        brokerClient;\r\n        constructor(brokerClient, brokerInterceptor, showButtons) {\r\n            this.brokerClient = brokerClient;\r\n            this.brokerClient.registerWebRTCBrokerInterceptor(new WebRTCBrokerInterceptorImpl_1.WebRTCBrokerInterceptorImpl(this, brokerInterceptor));\r\n            JanusHandler_1.JanusHandler.initialize(brokerClient.getClientId(), brokerClient.loadUpConf.fullyQualifiedURL, showButtons)\r\n                .setBorkerInterceptor(brokerInterceptor);\r\n            HoldAuditTrailRestClient_1.HoldAuditTrailRestClient.initializeRestUrl(brokerClient.loadUpConf.fullyQualifiedURL);\r\n        }\r\n        reconnect() {\r\n            JanusHandler_1.JanusHandler.getInstance().reconnect();\r\n        }\r\n        endSession(sessionId) {\r\n            WebRTCBrokerInterceptorHandler_1.WebRTCBrokerInterceptorHandler.getInstance().handleSessionClose();\r\n            this.brokerClient.closeSession(sessionId);\r\n        }\r\n        registerCall(template, options) {\r\n            template.interactionType = 'MEDIA';\r\n            template.interactionSubType = options.mediaConstraints.video ? 'VIDEO' : 'AUDIO';\r\n            template.channel = options.mediaConstraints.video ? 'VIDEO' : 'AUDIO';\r\n            RegistrationHolder_1.RegistrationHolder.saveRegistration('Default', options);\r\n            this.brokerClient.registerNewReqToBroker(template);\r\n        }\r\n        requestForRoomId(interactionId, sessionId, mediaConstraints) {\r\n            let data = new BrokerMessage_1.BrokerMessage(ClientTypes_1.BrokerTypes.WEB_RTC, interactionId, ClientTypes_1.MessageType.ROOM_ID_REQUESTED, { interactionId, sessionId, mediaConstraints });\r\n            this.brokerClient.sendMessageToBroker(data);\r\n        }\r\n        initiateCall(sessionId, interactionId, sender, options) {\r\n            console.log('Initiating call for existing session');\r\n            RegistrationHolder_1.RegistrationHolder.saveRegistration('Default', options);\r\n            this.requestForRoomId(interactionId, sessionId, options.mediaConstraints);\r\n            let data = new BrokerMessage_1.BrokerMessage(ClientTypes_1.BrokerTypes.WEB_RTC, sender, ClientTypes_1.MessageType.CALL_INITIATED, { interactionId, sessionId, mediaConstraints: options.mediaConstraints });\r\n            this.brokerClient.sendMessageToBroker(data);\r\n        }\r\n        confirmationAccepted(sessionId, interactionId, sender) {\r\n            let data = new BrokerMessage_1.BrokerMessage(ClientTypes_1.BrokerTypes.WEB_RTC, sender, ClientTypes_1.MessageType.CONFIRMATION_ACCEPTED, { interactionId, sessionId });\r\n            this.brokerClient.sendMessageToBroker(data);\r\n        }\r\n        confirmationRejected(sessionId, interactionId, sender) {\r\n            let data = new BrokerMessage_1.BrokerMessage(ClientTypes_1.BrokerTypes.WEB_RTC, sender, ClientTypes_1.MessageType.CONFIRMATION_REJECTED, { interactionId, sessionId });\r\n            this.brokerClient.sendMessageToBroker(data);\r\n        }\r\n        endCall(sessionId, interactionId, sender) {\r\n            WebRTCBrokerInterceptorHandler_1.WebRTCBrokerInterceptorHandler.getInstance().handleSessionClose();\r\n            let data = new BrokerMessage_1.BrokerMessage(ClientTypes_1.BrokerTypes.WEB_RTC, sender, ClientTypes_1.MessageType.END_CALL, { interactionId, sessionId });\r\n            this.brokerClient.sendMessageToBroker(data);\r\n        }\r\n        isMediaCallActive() {\r\n            return JanusHandler_1.JanusHandler.getInstance().isJanusConnected();\r\n        }\r\n        toggleMute() {\r\n            JanusHandler_1.JanusHandler.getInstance().toggleMute();\r\n        }\r\n        toggleVideo() {\r\n            JanusHandler_1.JanusHandler.getInstance().toggleVideo();\r\n        }\r\n        isVideoMuted() {\r\n            return JanusHandler_1.JanusHandler.getInstance().isVideoMuted();\r\n        }\r\n        isAudioMuted() {\r\n            return JanusHandler_1.JanusHandler.getInstance().isAudioMuted();\r\n        }\r\n        getMediaDevices(callback) {\r\n            JanusHandler_1.JanusHandler.getInstance().getMediaDevices(callback);\r\n        }\r\n        restartCapture(audioDeviceId, videoDeviceId) {\r\n            JanusHandler_1.JanusHandler.getInstance().restartCapture(audioDeviceId, videoDeviceId);\r\n        }\r\n        publish(tenantId, clientId, interactionId) {\r\n            return HoldAuditTrailRestClient_1.HoldAuditTrailRestClient.recordUnHoldAction(tenantId, clientId, interactionId);\r\n        }\r\n        unPublish(tenantId, clientId, interactionId) {\r\n            return HoldAuditTrailRestClient_1.HoldAuditTrailRestClient.recordHoldAction(tenantId, clientId, interactionId);\r\n        }\r\n        destroy() {\r\n            JanusHandler_1.JanusHandler.getInstance().destroy();\r\n        }\r\n        capBitrate(bitrate) {\r\n            JanusHandler_1.JanusHandler.getInstance().capBitrate(bitrate);\r\n        }\r\n        getJanusServerHost() {\r\n            return JanusHandler_1.JanusHandler.getInstance().getJanusServerHost();\r\n        }\r\n    }\r\n    exports.AbstractWebRTCMessageBrokerClient = AbstractWebRTCMessageBrokerClient;\r\n});\r\n","define([\"require\", \"exports\"], function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.RegistrationHolder = void 0;\r\n    class RegistrationHolder {\r\n        constructor() { }\r\n        static registrationMap = new Map();\r\n        static saveRegistration(sessionId, options, onRegistrationSuccessCallback) {\r\n            RegistrationHolder.registrationMap.set('Default', { options, onRegistrationSuccessCallback });\r\n        }\r\n        static bitrate = 0;\r\n        static setMaxBitRate(bitrate) {\r\n            RegistrationHolder.bitrate = bitrate;\r\n        }\r\n        static getMaxBitRate() {\r\n            return RegistrationHolder.bitrate;\r\n        }\r\n        static getRegistrationOptions(sessionId) {\r\n            let template = RegistrationHolder.registrationMap.get('Default');\r\n            if (template)\r\n                return template.options;\r\n            else\r\n                return undefined;\r\n        }\r\n        static getAvailableMediaConstrains(sessionId) {\r\n            let template = RegistrationHolder.registrationMap.get('Default');\r\n            if (template)\r\n                return template.options.mediaConstraints;\r\n            else\r\n                return undefined;\r\n        }\r\n        static getRegistrationCallback(sessionId) {\r\n            let template = RegistrationHolder.registrationMap.get('Default');\r\n            if (template && template.onRegistrationSuccessCallback)\r\n                return template.onRegistrationSuccessCallback;\r\n            else\r\n                return undefined;\r\n        }\r\n    }\r\n    exports.RegistrationHolder = RegistrationHolder;\r\n});\r\n","define([\"require\", \"exports\", \"./AbstractWebRTCMessageBrokerClient\"], function (require, exports, AbstractWebRTCMessageBrokerClient_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.StandardWebRTCMessageBrokerClient = void 0;\r\n    class StandardWebRTCMessageBrokerClient extends AbstractWebRTCMessageBrokerClient_1.AbstractWebRTCMessageBrokerClient {\r\n        constructor(brokerClient, brokerInterceptor, showButtons) {\r\n            super(brokerClient, brokerInterceptor, showButtons);\r\n        }\r\n    }\r\n    exports.StandardWebRTCMessageBrokerClient = StandardWebRTCMessageBrokerClient;\r\n});\r\n","define([\"require\", \"exports\", \"./../../janus/JanusHandler\"], function (require, exports, JanusHandler_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.HoldAuditTrailRestClient = void 0;\r\n    const r = /:\\/\\/(.[^/]+)/;\r\n    class HoldAuditTrailRestClient {\r\n        constructor() { }\r\n        static async recordHoldAction(tenantId, sender, interactionId) {\r\n            const response = await fetch(HoldAuditTrailRestClient.domain + '/audit_trail/hold', {\r\n                method: 'POST',\r\n                body: JSON.stringify({ sender, interactionId }),\r\n                headers: { 'Content-Type': 'application/json', 'tenantId': tenantId }\r\n            });\r\n            return response.json().then((data) => {\r\n                if (data.status == 200 && data.data) {\r\n                    JanusHandler_1.JanusHandler.getInstance().unPublish();\r\n                    return new Promise((resolve, reject) => {\r\n                        resolve(true);\r\n                    });\r\n                }\r\n                else {\r\n                    return new Promise((resolve, reject) => {\r\n                        resolve(false);\r\n                    });\r\n                }\r\n            });\r\n        }\r\n        static async recordUnHoldAction(tenantId, sender, interactionId) {\r\n            const response = await fetch(HoldAuditTrailRestClient.domain + '/audit_trail/unhold', {\r\n                method: 'POST',\r\n                body: JSON.stringify({ sender, interactionId }),\r\n                headers: { 'Content-Type': 'application/json', 'tenantId': tenantId }\r\n            });\r\n            return response.json().then((data) => {\r\n                if (data.status == 200 && data.data) {\r\n                    JanusHandler_1.JanusHandler.getInstance().publish();\r\n                    return new Promise((resolve, reject) => {\r\n                        resolve(true);\r\n                    });\r\n                }\r\n                else {\r\n                    return new Promise((resolve, reject) => {\r\n                        resolve(false);\r\n                    });\r\n                }\r\n            });\r\n        }\r\n        static domain = '';\r\n        static initializeRestUrl(url) {\r\n            try {\r\n                let matcher = url.match(r);\r\n                if (matcher && matcher[1]) {\r\n                    HoldAuditTrailRestClient.domain = \"https://\" + matcher[1] + \"/reporting-server\";\r\n                    console.log('[ConstructDispatcherUrl],Url:' + HoldAuditTrailRestClient.domain);\r\n                }\r\n            }\r\n            catch (error) {\r\n                console.error('[ConstructDispatcherUrl] :Error :', error);\r\n            }\r\n        }\r\n    }\r\n    exports.HoldAuditTrailRestClient = HoldAuditTrailRestClient;\r\n});\r\n","define([\"require\", \"exports\"], function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.RecordingAuditTrailRestClient = void 0;\r\n    class RecordingAuditTrailRestClient {\r\n        static async record(url, interactionId, roomId, { display, janusClientId, audioCodec, videoCodec, recording, janusServerHost }) {\r\n            recording = (recording != undefined) ? recording : false;\r\n            console.log('RecordingAuditTrailRestClient', { interactionId, display, janusClientId, audioCodec, videoCodec, roomId, janusServerHost });\r\n            const response = await fetch(url, {\r\n                method: 'POST',\r\n                body: JSON.stringify({ interactionId, display, janusClientId, audioCodec, videoCodec, roomId, recording, janusServerHost }),\r\n                headers: { 'Content-Type': 'application/json' }\r\n            });\r\n            if (!response.ok) {\r\n                return new Promise((resolve, reject) => {\r\n                    resolve(false);\r\n                });\r\n            }\r\n            return new Promise((resolve, reject) => {\r\n                resolve(true);\r\n            });\r\n        }\r\n    }\r\n    exports.RecordingAuditTrailRestClient = RecordingAuditTrailRestClient;\r\n});\r\n","define([\"require\", \"exports\", \"./../janus/JanusHandler\", \"./../client/RegistrationHolder\"], function (require, exports, JanusHandler_1, RegistrationHolder_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.WebRTCBrokerInterceptorHandler = void 0;\r\n    class WebRTCBrokerInterceptorHandler {\r\n        roomDetails = new Map();\r\n        static instance;\r\n        constructor() { }\r\n        static getInstance() {\r\n            if (!WebRTCBrokerInterceptorHandler.instance) {\r\n                WebRTCBrokerInterceptorHandler.instance = new WebRTCBrokerInterceptorHandler();\r\n            }\r\n            return WebRTCBrokerInterceptorHandler.instance;\r\n        }\r\n        saveRoomDetailsIfNotExists({ roomId, token, roomName, interactionId, mediaConstraints }) {\r\n            if (!this.roomDetails.has(interactionId)) {\r\n                this.roomDetails.set(interactionId, { roomId, token, roomName, interactionId, mediaConstraints });\r\n            }\r\n            else {\r\n                console.log('[WebRTCBrokerInterceptorHandler], room details already found for interaction<' + interactionId +\r\n                    '> , previouse details ' + JSON.stringify(this.roomDetails.get(interactionId)) +\r\n                    ' , current details ' + JSON.stringify({ roomId, token, roomName, interactionId }) + ' ');\r\n            }\r\n        }\r\n        handleRoomCreation({ roomId, token, roomName, interactionId, mediaConstraints, preRecordedMediaUrl, bitrateCap }) {\r\n            console.log('[WebRTCBrokerInterceptorHandler], handleRoomCreation', roomId, token, roomName, interactionId);\r\n            RegistrationHolder_1.RegistrationHolder.setMaxBitRate(bitrateCap ? bitrateCap : 0);\r\n            this.saveRoomDetailsIfNotExists({ roomId, token, roomName, interactionId, mediaConstraints });\r\n            JanusHandler_1.JanusHandler.getInstance().registerUsername(interactionId, roomId, mediaConstraints, preRecordedMediaUrl);\r\n        }\r\n        handleSessionClose() {\r\n            JanusHandler_1.JanusHandler.getInstance().destroy();\r\n        }\r\n    }\r\n    exports.WebRTCBrokerInterceptorHandler = WebRTCBrokerInterceptorHandler;\r\n});\r\n","define([\"require\", \"exports\", \"./../../message-broker/client/ClientTypes\", \"./../client/RegistrationHolder\", \"./WebRTCBrokerInterceptorHandler\"], function (require, exports, ClientTypes_1, RegistrationHolder_1, WebRTCBrokerInterceptorHandler_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.WebRTCBrokerInterceptorImpl = void 0;\r\n    class WebRTCBrokerInterceptorImpl {\r\n        brokerInterceptor;\r\n        webRtcClient;\r\n        constructor(webRtcClient, brokerInterceptor) {\r\n            this.brokerInterceptor = brokerInterceptor;\r\n            this.webRtcClient = webRtcClient;\r\n        }\r\n        onMessage(message) {\r\n            console.log('[WebRTCBrokerInterceptorImpl] onMessage:', message);\r\n            switch (message.messageType) {\r\n                case ClientTypes_1.MessageType.CALL_INITIATED:\r\n                    {\r\n                        let sessionId = message.data['sessionId'];\r\n                        let interactionId = message.data['interactionId'];\r\n                        let mediaConstraints = message.data['mediaConstraints'];\r\n                        try {\r\n                            this.brokerInterceptor.onCallInitiated(sessionId, interactionId, mediaConstraints);\r\n                        }\r\n                        catch (error) {\r\n                            console.error('[CALL_INITIATED ] ,', error);\r\n                        }\r\n                    }\r\n                    break;\r\n                case ClientTypes_1.MessageType.REGISTERATION_DONE:\r\n                    {\r\n                        let interactionId = message.data['interactionId'];\r\n                        let sessionId = message.data['sessionId'];\r\n                        let channel = message.data['channel'];\r\n                        if (channel == 'VIDEO' || channel == 'AUDIO') {\r\n                            let mediaConstraints = RegistrationHolder_1.RegistrationHolder.getAvailableMediaConstrains();\r\n                            this.webRtcClient.requestForRoomId(interactionId, sessionId, mediaConstraints);\r\n                        }\r\n                    }\r\n                    break;\r\n                case ClientTypes_1.MessageType.ON_ROOM_CREATED:\r\n                    {\r\n                        let { roomDetails: { roomInfo: { roomId, token, roomName }, mediaConstraints, bitrateCap }, interactionId, preRecordedMediaUrl, sessionId } = message.data;\r\n                        WebRTCBrokerInterceptorHandler_1.WebRTCBrokerInterceptorHandler.getInstance().\r\n                            handleRoomCreation({ roomId, token, roomName, interactionId, mediaConstraints, preRecordedMediaUrl, bitrateCap });\r\n                        if (this.brokerInterceptor && this.brokerInterceptor.mediaSessionStarted)\r\n                            this.brokerInterceptor.mediaSessionStarted(interactionId, sessionId, mediaConstraints, roomId);\r\n                        else\r\n                            console.warn('[MediaSessionStarted] method callback not provided');\r\n                    }\r\n                    break;\r\n                case ClientTypes_1.MessageType.ON_ROOM_CREATION_FAILED:\r\n                    {\r\n                        let { interactionId, sessionId, reason } = message.data;\r\n                        if (this.brokerInterceptor && this.brokerInterceptor.mediaSessionFailed)\r\n                            this.brokerInterceptor.mediaSessionFailed(interactionId, sessionId, reason);\r\n                        else\r\n                            console.warn('[MediaSessionFailed] method callback not provided');\r\n                    }\r\n                    break;\r\n                case ClientTypes_1.MessageType.ON_SESSION_CLOSE_REQUEST:\r\n                    try {\r\n                        WebRTCBrokerInterceptorHandler_1.WebRTCBrokerInterceptorHandler.getInstance().handleSessionClose();\r\n                    }\r\n                    catch (error) {\r\n                        console.error('[ON_SESSION_CLOSE_REQUEST - handleSessionClose] ,', error);\r\n                    }\r\n                    break;\r\n                case ClientTypes_1.MessageType.CONFIRMATION_ACCEPTED:\r\n                    if (this.brokerInterceptor) {\r\n                        let sessionId = message.data['sessionId'];\r\n                        try {\r\n                            this.brokerInterceptor.onCallAccepted(sessionId);\r\n                        }\r\n                        catch (error) {\r\n                            console.error('[CONFIRMATION_ACCEPTED - handleSessionClose] ,', error);\r\n                        }\r\n                    }\r\n                    break;\r\n                case ClientTypes_1.MessageType.CONFIRMATION_REJECTED:\r\n                    {\r\n                        let sessionId = message.data['sessionId'];\r\n                        let rejectedReason = message.data['rejectedReason'];\r\n                        if (this.brokerInterceptor) {\r\n                            this.brokerInterceptor.onCallRejected(sessionId, rejectedReason);\r\n                        }\r\n                        try {\r\n                            WebRTCBrokerInterceptorHandler_1.WebRTCBrokerInterceptorHandler.getInstance().handleSessionClose();\r\n                        }\r\n                        catch (error) {\r\n                            console.error('[CONFIRMATION_REJECTED - handleSessionClose] ,', error);\r\n                        }\r\n                    }\r\n                    break;\r\n                case ClientTypes_1.MessageType.END_CALL:\r\n                    {\r\n                        let sessionId = message.data['sessionId'];\r\n                        try {\r\n                            WebRTCBrokerInterceptorHandler_1.WebRTCBrokerInterceptorHandler.getInstance().handleSessionClose();\r\n                            if (this.brokerInterceptor)\r\n                                this.brokerInterceptor.onSessionClosed(sessionId);\r\n                        }\r\n                        catch (error) {\r\n                            console.error('[END_CALL -onSessionClosed] ,', error);\r\n                        }\r\n                    }\r\n                    break;\r\n                default:\r\n                    console.warn(' [' + message.messageType + '] not supported in WebRTCBrokerInterceptorImpl');\r\n            }\r\n        }\r\n    }\r\n    exports.WebRTCBrokerInterceptorImpl = WebRTCBrokerInterceptorImpl;\r\n});\r\n","define([\"require\", \"exports\"], function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    class Event {\r\n        handlers = [];\r\n        on(handler) {\r\n            this.handlers.push(handler);\r\n        }\r\n        off(handler) {\r\n            this.handlers = this.handlers.filter(h => h !== handler);\r\n        }\r\n        trigger(data) {\r\n            this.handlers.slice(0).forEach(h => h(data));\r\n        }\r\n        expose() {\r\n            return this;\r\n        }\r\n    }\r\n    exports.default = Event;\r\n});\r\n","define([\"require\", \"exports\"], function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    class Feed {\r\n        id;\r\n        display;\r\n        audio_codec;\r\n        video_codec;\r\n        talking;\r\n        janusPluginHandle;\r\n        rfindex;\r\n        isRemote;\r\n        intervalId;\r\n        constructor(params) {\r\n            this.id = params.id;\r\n            this.display = params.display;\r\n            this.audio_codec = params.audio_codec;\r\n            this.video_codec = params.video_codec;\r\n            this.talking = params.talking;\r\n            this.janusPluginHandle = params.janusPluginHandle;\r\n            this.rfindex = params.rfindex;\r\n            this.isRemote = params.isRemote;\r\n        }\r\n    }\r\n    exports.default = Feed;\r\n});\r\n","define([\"require\", \"exports\"], function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    class JanusHandleHelper {\r\n        janusPluginHandle;\r\n        isRecording = false;\r\n        isRecordingSelf = false;\r\n        constructor(pluginHandle) {\r\n            this.janusPluginHandle = pluginHandle;\r\n        }\r\n        /**\r\n         * List rooms in Janus Server\r\n         *\r\n         * @param cb - Callback returning list of rooms\r\n         */\r\n        listRooms(cb) {\r\n            const list = {\r\n                request: \"list\"\r\n            };\r\n            if (this.janusPluginHandle)\r\n                this.janusPluginHandle.send({\r\n                    message: list,\r\n                    success: function (res) {\r\n                        cb(null, res.list);\r\n                    },\r\n                    error: function (err) {\r\n                        console.error(err);\r\n                        cb(err);\r\n                    }\r\n                });\r\n        }\r\n        /**\r\n         * Record\r\n         *\r\n         * @param roomId - Unique room id\r\n         * @param roomSecret\r\n         * @param record - Is true to start recording\r\n         * @param cb - callback(err, res) returning response after starting recording\r\n         */\r\n        record(roomId, roomSecret, record, cb) {\r\n            const recording = {\r\n                request: \"enable_recording\",\r\n                room: roomId,\r\n                secret: roomSecret,\r\n                record: record\r\n            };\r\n            if (this.janusPluginHandle)\r\n                this.janusPluginHandle.send({\r\n                    message: recording,\r\n                    success: (res) => {\r\n                        this.isRecording = res.record;\r\n                        cb(null, res);\r\n                    },\r\n                    error: (err) => {\r\n                        console.error(err);\r\n                        cb(err);\r\n                    }\r\n                });\r\n        }\r\n        /**\r\n         * RecordSelf, record my single stream\r\n         *\r\n         * @param record - boolean\r\n         * @param cb - callback(err, res) returning response after starting recording\r\n         */\r\n        recordSelf(record, cb) {\r\n            const recording = {\r\n                request: \"configure\",\r\n                record: record\r\n            };\r\n            if (this.janusPluginHandle)\r\n                this.janusPluginHandle.send({\r\n                    message: recording,\r\n                    success: (res) => {\r\n                        this.isRecordingSelf = record;\r\n                        cb(null, res);\r\n                    },\r\n                    error: (err) => {\r\n                        console.error(err);\r\n                        cb(err);\r\n                    }\r\n                });\r\n        }\r\n    }\r\n    exports.default = JanusHandleHelper;\r\n});\r\n","/** Unless otherwise licensed, the software is our proprietary property and all source code, database,\r\n* functionality, website design, audio, video, text, photographs and graphics on the site or the product (\r\n* collectively, the “Content”) and the trademarks, service marks, and logos contained therein ( the\r\n* “Marks”) are owned or controlled by us or licenses to us, and are protected by the copyright and\r\n* trademark laws and various other intellectual property rights and unfair competition laws in domestic as\r\n* well as in foreign jurisdictions and international conventions.\r\n*/\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\ndefine([\"require\", \"exports\", \"./../client/RegistrationHolder\", \"./../client/rest/RecordingAuditTrailRestClient\", \"./JanusWrapper\"], function (require, exports, RegistrationHolder_1, RecordingAuditTrailRestClient_1, JanusWrapper_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.JanusHandler = void 0;\r\n    JanusWrapper_1 = __importDefault(JanusWrapper_1);\r\n    // JanusJS is the namespace that declares the Janus typescript types\r\n    // dispatcher server\r\n    //const server = 'https://www.dev.cxinfinity.novelvox.net/janus-dispatcher';\r\n    const r = /:\\/\\/(.[^/]+)/;\r\n    //disablePictureInPicture\r\n    let janus;\r\n    const janusInitData = { username: 'admin', password: 'supersecret' };\r\n    let mediaConstraints;\r\n    class JanusHandler {\r\n        preRecordedMessageUrl;\r\n        server = '';\r\n        static instance;\r\n        static getInstance() {\r\n            if (!JanusHandler.instance)\r\n                throw new Error('Janus Handler Not initialized');\r\n            return JanusHandler.instance;\r\n        }\r\n        static initialize(clientId, signallingServerUrl, showButtons) {\r\n            if (!JanusHandler.instance)\r\n                JanusHandler.instance = new JanusHandler(clientId, signallingServerUrl, janusInitData, showButtons);\r\n            else\r\n                console.log('[JanusHandler] already initialized ');\r\n            return JanusHandler.instance;\r\n        }\r\n        brokerInterceptor;\r\n        setBorkerInterceptor(brokerInterceptor) {\r\n            this.brokerInterceptor = brokerInterceptor;\r\n        }\r\n        clientId = 'Customer';\r\n        setClientId(clientId) {\r\n            this.clientId = clientId;\r\n        }\r\n        constructDispatcherUrl(url) {\r\n            try {\r\n                let matcher = url.match(r);\r\n                if (matcher && matcher[1]) {\r\n                    return \"https://\" + matcher[1] + \"/janus-dispatcher\";\r\n                }\r\n            }\r\n            catch (error) {\r\n                console.error('[ConstructDispatcherUrl] :Error :', error);\r\n            }\r\n            throw new Error('no match found to construct dispatcher url');\r\n        }\r\n        constructRecordingUrl(url) {\r\n            try {\r\n                let matcher = url.match(r);\r\n                if (matcher && matcher[1]) {\r\n                    return \"https://\" + matcher[1] + \"/cx-interaction/recording/trail\";\r\n                }\r\n            }\r\n            catch (error) {\r\n                console.error('[ConstructDispatcherUrl] :Error :', error);\r\n            }\r\n            throw new Error('no match found to construct dispatcher url');\r\n        }\r\n        signallingServerUrl;\r\n        activeInteractionId;\r\n        activeRoomId;\r\n        constructor(clientId, signallingServerUrl, { username, password }, showButtons = true) {\r\n            this.clientId = clientId;\r\n            let acceptCommands = true;\r\n            let bitrateStatsEnabled = false;\r\n            let autoCapBandwidth = true;\r\n            this.signallingServerUrl = signallingServerUrl;\r\n            this.server = this.constructDispatcherUrl(signallingServerUrl);\r\n            console.info('[Janus Handler], Constructed Dispatcher Url: ' + this.server);\r\n            janus = new JanusWrapper_1.default({\r\n                username, password, dispatcherServer: this.server, localVideoContainerDivId: 'videolocal',\r\n                videoElemId: 'myvideo', publisherDivId: 'publisher', acceptCommands,\r\n                bitrateStatsEnabled, showButtons, autoCapBandwidth\r\n            });\r\n            janus.init({\r\n                debug: \"all\",\r\n                callback: this.janusInitCallback\r\n            });\r\n        }\r\n        checkServerState() {\r\n            fetch(this.server + '/alive').then(function (res) {\r\n                //console.log('[JanusHandler] Janus dispatcher is Up');\r\n            }).catch(function (err) {\r\n                console.log('[JanusHandler] Janus dispatcher is Down');\r\n            });\r\n        }\r\n        playPreRecorded() {\r\n            const vRemoteContainerElem = document.getElementById(`videoremote0`);\r\n            if (vRemoteContainerElem)\r\n                vRemoteContainerElem.innerHTML = `\r\n           <video class=\"rounded centered\" id=\"waitingvideo\" disablePictureInPicture width=\"100%\" height=\"100%\" autoplay loop src=\"${this.preRecordedMessageUrl}\"></video>`;\r\n        }\r\n        setVisibility(visibility) {\r\n            var cxiVideoContainer = document.getElementById('cxi-media-container');\r\n            if (cxiVideoContainer)\r\n                cxiVideoContainer.style.visibility = visibility;\r\n            else\r\n                console.log('No Audio/Video Div Container {id:cxi-media-container} found');\r\n            var videolocalEle = document.getElementById('videolocal');\r\n            if (videolocalEle)\r\n                videolocalEle.style.visibility = visibility;\r\n            var videoremote0 = document.getElementById('videoremote0');\r\n            if (videoremote0)\r\n                videoremote0.style.visibility = visibility;\r\n            if (visibility == 'hidden') {\r\n                const waitingV = document.getElementById('waitingvideo');\r\n                if (waitingV)\r\n                    waitingV.remove();\r\n            }\r\n        }\r\n        onLocalParticipentsRoomJoined = (e) => {\r\n            if (!e)\r\n                return;\r\n            let { publishers } = e;\r\n            console.log(\"Joined/Registered to room\", e);\r\n            this.setVisibility('visible');\r\n            // play pre-recorded sound if no other user in the room\r\n            if (publishers.length === 0) {\r\n                this.playPreRecorded();\r\n            }\r\n            // Display and allow media device selection\r\n            janus.initDeviceSelection({ audio: true, video: true });\r\n            janus.publish(function publishStreamCallback(err, res) {\r\n                if (err) {\r\n                    return console.error(err);\r\n                }\r\n            }, mediaConstraints);\r\n        };\r\n        onLocalStreamStarted = (obj) => {\r\n            console.log('[Janus] onLocalStreamStarted');\r\n            if (this.brokerInterceptor && this.brokerInterceptor.onLocalStreamStarted) {\r\n                this.brokerInterceptor.onLocalStreamStarted();\r\n                this.capBitrate(RegistrationHolder_1.RegistrationHolder.getMaxBitRate());\r\n            }\r\n        };\r\n        getJanusServerHost() {\r\n            return janus.getJanusServerHost();\r\n        }\r\n        onPublisherPublished = (obj) => {\r\n            console.log('[Janus] onPublisherPublished ', obj);\r\n            try {\r\n                if (obj) {\r\n                    let display = obj['display'];\r\n                    let janusClientId = obj['id'];\r\n                    let audioCodec = obj['audio_codec'];\r\n                    let videoCodec = obj['video_codec'];\r\n                    RecordingAuditTrailRestClient_1.RecordingAuditTrailRestClient.record(this.constructRecordingUrl(this.signallingServerUrl), this.activeInteractionId, this.activeRoomId, {\r\n                        display,\r\n                        janusClientId,\r\n                        audioCodec,\r\n                        videoCodec,\r\n                        recording: mediaConstraints.record,\r\n                        janusServerHost: janus.getJanusServerHost()\r\n                    });\r\n                }\r\n            }\r\n            catch (error) {\r\n                console.error(error);\r\n            }\r\n        };\r\n        onRemoteStreamStarted = (obj) => {\r\n            try {\r\n                console.log('[Janus] onRemoteStreamStarted');\r\n                const stream = obj.stream;\r\n                const rfindex = obj.rfindex;\r\n                let remoteVideoElem = document.getElementById(`remotevideo${rfindex}`);\r\n                let vRemoteContainerElem = document.getElementById(`videoremote${rfindex}`);\r\n                if (!remoteVideoElem && vRemoteContainerElem) {\r\n                    // No remote video yet\r\n                    vRemoteContainerElem.innerHTML = `\r\n          <video class=\"rounded centered\" disablePictureInPicture id=\"waitingvideo${rfindex}\" width=\"100%\" height=\"100%\"></video>\r\n          <video class=\"rounded centered relative hide\" disablePictureInPicture id=\"remotevideo${rfindex}\" width=\"100%\" height=\"100%\" autoplay playsinline></video>`;\r\n                    remoteVideoElem = document.getElementById(`remotevideo${rfindex}`);\r\n                    if (remoteVideoElem) {\r\n                        remoteVideoElem.onplaying = () => {\r\n                            const waitingV = document.getElementById(`waitingvideo${rfindex}`);\r\n                            if (waitingV)\r\n                                waitingV.remove();\r\n                        };\r\n                    }\r\n                }\r\n                // attach a stream to a video element\r\n                janus.attachMediaStream(remoteVideoElem, stream);\r\n                var videoTracks = stream.getVideoTracks();\r\n                if (!videoTracks || videoTracks.length === 0) {\r\n                    // No remote video\r\n                    if (remoteVideoElem)\r\n                        remoteVideoElem.hidden;\r\n                }\r\n                else {\r\n                    document.querySelectorAll('#videoremote' + rfindex + ' .no-video-container').forEach(el => {\r\n                        el.remove();\r\n                    });\r\n                    if (remoteVideoElem)\r\n                        remoteVideoElem.classList.remove('hide');\r\n                }\r\n            }\r\n            catch (error) {\r\n                console.error(error);\r\n            }\r\n            try {\r\n                if (this.brokerInterceptor && this.brokerInterceptor.onRemoteStreamStarted) {\r\n                    this.brokerInterceptor.onRemoteStreamStarted();\r\n                }\r\n            }\r\n            catch (error) {\r\n                console.error(error);\r\n            }\r\n        };\r\n        janusInitCallback = () => {\r\n            console.log('[JanusHandler janusInitCallback]');\r\n            this.checkServerState();\r\n            if (!janus.isWebrtcSupported()) {\r\n                console.log(\"No WebRTC support... \");\r\n                return;\r\n            }\r\n            // Our local participant joined/registered to the room. Here we can decide if directly publishing our local media stream\r\n            janus.joinedEvt.on(this.onLocalParticipentsRoomJoined);\r\n            janus.destroyedEvt.on((e) => {\r\n                console.log('The room has been destroyed');\r\n                this.setVisibility('hidden');\r\n                // this.destroy();\r\n            });\r\n            // Local stream available. Here we will decide what happens once our local video is available\r\n            janus.localStreamStartedEvt.on(this.onLocalStreamStarted);\r\n            // Remote media stream available. Here we will decide where, when and how to display this new participant stream\r\n            janus.remoteStreamStartedEvt.on(this.onRemoteStreamStarted);\r\n            // A publisher joined the room\r\n            janus.publisherPublishedEvt.on(this.onPublisherPublished);\r\n            // A publisher stopped publishing. Here we typically handle the change of display when the participant is not publishing\r\n            janus.publisherUnpublishedEvt.on(function (publisher) {\r\n                if (!publisher) {\r\n                    return;\r\n                }\r\n                console.log('Publisher unpublished:', publisher);\r\n                let remoteDivEle = document.getElementById(`remote${publisher.rfindex}`);\r\n                if (remoteDivEle)\r\n                    remoteDivEle.classList.add('hide');\r\n                let remoteVideoContainer = document.getElementById(`videoremote${publisher.rfindex}`);\r\n                if (remoteVideoContainer)\r\n                    while (remoteVideoContainer.firstChild)\r\n                        remoteVideoContainer.removeChild(remoteVideoContainer.firstChild);\r\n            });\r\n            // We successfully disconnected from a room and ended the call. Here we restart our initial buttons to be able to publish again\r\n            janus.localDisconnectionEvt.on(() => {\r\n                try {\r\n                    if (this.brokerInterceptor && this.brokerInterceptor.onLocalStreamDisconnected) {\r\n                        this.brokerInterceptor.onLocalStreamDisconnected();\r\n                    }\r\n                }\r\n                catch (error) {\r\n                    console.error(error);\r\n                }\r\n            });\r\n            // A remote participant totally left the room. Here we handle the cleanup of the remote participant (usually happens after a user unpublished)\r\n            janus.remoteDisconnectionEvt.on((feedIndex) => {\r\n                try {\r\n                    if (feedIndex !== null) {\r\n                        let remoteVideoContainer = document.getElementById(`videoremote${feedIndex}`);\r\n                        if (remoteVideoContainer)\r\n                            while (remoteVideoContainer.firstChild)\r\n                                remoteVideoContainer.removeChild(remoteVideoContainer.firstChild);\r\n                    }\r\n                    if (janus.feeds.length === 0) {\r\n                        var videoremote0 = document.getElementById('videoremote0');\r\n                        if (videoremote0 && videoremote0.style.visibility == 'visible') {\r\n                            this.playPreRecorded();\r\n                        }\r\n                    }\r\n                }\r\n                catch (error) {\r\n                    console.error(error);\r\n                }\r\n                try {\r\n                    if (this.brokerInterceptor && this.brokerInterceptor.onRemoteStreamDisconnected) {\r\n                        this.brokerInterceptor.onRemoteStreamDisconnected();\r\n                    }\r\n                }\r\n                catch (error) {\r\n                    console.error(error);\r\n                }\r\n            });\r\n            // Handle the event of video turn off due to a slow link, here we display the modal\r\n            janus.videoOffOptimizationEvt.on(function () {\r\n                const infoModal = document.getElementById('infoModal');\r\n                if (infoModal) {\r\n                    infoModal.style.display = 'block';\r\n                    setTimeout(function () {\r\n                        infoModal.style.display = 'none';\r\n                    }, 3000, infoModal);\r\n                }\r\n            });\r\n            janus.recordingEvt.on(function (rec) {\r\n                if (!rec)\r\n                    return;\r\n                let { started, selfOnly } = rec;\r\n                if (selfOnly) {\r\n                    let recordingSelfBtn = document.getElementById('recordingSelfBtn');\r\n                    if (recordingSelfBtn)\r\n                        recordingSelfBtn.innerText = started ? \"Stop My Recording\" : \"Start My Recording\";\r\n                }\r\n                else {\r\n                    let recordingBtn = document.getElementById('recordingBtn');\r\n                    if (recordingBtn)\r\n                        recordingBtn.innerText = started ? \"Stop Recording All\" : \"Start Recording All\";\r\n                }\r\n            });\r\n            console.log('[JanusHandler janusInitCallback DONE]');\r\n        };\r\n        publish() {\r\n            janus.publish((err, res) => {\r\n                if (err)\r\n                    console.error(err);\r\n            }, mediaConstraints);\r\n        }\r\n        unPublish() {\r\n            janus.unpublish();\r\n        }\r\n        isJanusConnected() {\r\n            if (janus && janus.isConnected()) {\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n        registerUsername(interactionId, roomId, constraints, preRecordedMediaUrl) {\r\n            if (janus && janus.isConnected()) {\r\n                console.log('[JanusHandler],registerUsername - janus already connected');\r\n                return;\r\n            }\r\n            this.activeInteractionId = interactionId;\r\n            this.activeRoomId = roomId;\r\n            this.preRecordedMessageUrl = preRecordedMediaUrl;\r\n            mediaConstraints = constraints;\r\n            janus.start(roomId, (err, resHandle) => {\r\n                if (err) {\r\n                    return console.error(err);\r\n                }\r\n                janus.register(this.clientId, roomId, function (error, res) {\r\n                    if (err) {\r\n                        return console.error(`Registration error. ${error}`);\r\n                    }\r\n                });\r\n            });\r\n        }\r\n        getMediaDevices(callback, config) {\r\n            janus.getMediaDevices(callback, config);\r\n        }\r\n        restartCapture(audioDeviceId, videoDeviceId) {\r\n            janus.restartCapture(audioDeviceId, videoDeviceId);\r\n        }\r\n        destroy() {\r\n            if (janus && janus.isConnected()) {\r\n                janus.detach();\r\n                janus.destroy();\r\n                console.log('[JanusHandler],destroy - janus destroyed');\r\n                this.setVisibility('hidden');\r\n            }\r\n            else\r\n                console.log('[JanusHandler],destroy - janus is not connected');\r\n        }\r\n        reconnect() {\r\n            janus.reconnect(mediaConstraints);\r\n        }\r\n        toggleMute() {\r\n            janus.toggleMute();\r\n        }\r\n        toggleVideo() {\r\n            janus.toggleVideo();\r\n        }\r\n        isVideoMuted() {\r\n            return janus.isVideoMuted();\r\n        }\r\n        isAudioMuted() {\r\n            return janus.isAudioMuted();\r\n        }\r\n        capBitrate(bitrate) {\r\n            janus.capBitrate(bitrate * 1000);\r\n        }\r\n    }\r\n    exports.JanusHandler = JanusHandler;\r\n});\r\n","var __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\ndefine([\"require\", \"exports\", \"./JanusHandleHelper\", \"./VideoClient\", \"./Feed\", \"./Event\", \"./Room\", \"./Utils\"], function (require, exports, JanusHandleHelper_1, VideoClient_1, Feed_1, Event_1, Room_1, Utils_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    JanusHandleHelper_1 = __importDefault(JanusHandleHelper_1);\r\n    VideoClient_1 = __importDefault(VideoClient_1);\r\n    Feed_1 = __importDefault(Feed_1);\r\n    Event_1 = __importDefault(Event_1);\r\n    Room_1 = __importDefault(Room_1);\r\n    Utils_1 = __importDefault(Utils_1);\r\n    /** Unless otherwise licensed, the software is our proprietary property and all source code, database,\r\n    * functionality, website design, audio, video, text, photographs and graphics on the site or the product (\r\n    * collectively, the “Content”) and the trademarks, service marks, and logos contained therein ( the\r\n    * “Marks”) are owned or controlled by us or licenses to us, and are protected by the copyright and\r\n    * trademark laws and various other intellectual property rights and unfair competition laws in domestic as\r\n    * well as in foreign jurisdictions and international conventions.\r\n    */\r\n    // Janus is the official janus.js bundle and JanusJS is the namespace that declares the Janus typescript types\r\n    const Janus = require('./third-party/janus/janusBundle');\r\n    /**\r\n     * The JanusWrapper is a class that wraps janus.js and simplifies its usage with some exposed functions for videochat up to 3 participants\r\n     */\r\n    class JanusWrapper {\r\n        // opaqueId is a string meaningful to your application (e.g., to map all the handles of the same user)\r\n        opaqueId;\r\n        janus;\r\n        janusHandle;\r\n        videoClient;\r\n        janusServer;\r\n        username;\r\n        password;\r\n        dispatcherServer;\r\n        stunServer;\r\n        turnServer;\r\n        turnUsername;\r\n        turnPassword;\r\n        janusHandleHelper;\r\n        publisherDivId;\r\n        room;\r\n        feeds = [];\r\n        myid;\r\n        mypvtid;\r\n        mystream;\r\n        myusername;\r\n        videoContainerDivId;\r\n        videoElemId;\r\n        showButtons;\r\n        acceptCommands;\r\n        bitrateStatsEnabled = false;\r\n        prevStat = { time: 0, bytes: 0, type: '' };\r\n        slowLinkTimes = 0;\r\n        slowLinkTimesThreshold = 8;\r\n        autoCapBandwidth = false;\r\n        autoCapped = false;\r\n        reconnectTimeout = 10000;\r\n        manuallyMutedVideo = false;\r\n        manuallyMutedAudio = false;\r\n        reconnecting = false;\r\n        mediaConstraints = { audio: true, video: true };\r\n        republished = false;\r\n        onJoinedEvent = new Event_1.default();\r\n        onDestroyedEvent = new Event_1.default();\r\n        onLocalStream = new Event_1.default();\r\n        onRemoteStream = new Event_1.default();\r\n        onPublisherPublished = new Event_1.default();\r\n        onPublisherUnpublished = new Event_1.default();\r\n        onLocalDisconnection = new Event_1.default();\r\n        onRemoteDisconnection = new Event_1.default();\r\n        videoOffOptimization = new Event_1.default();\r\n        recording = new Event_1.default();\r\n        get joinedEvt() { return this.onJoinedEvent.expose(); }\r\n        get destroyedEvt() { return this.onDestroyedEvent.expose(); }\r\n        get localStreamStartedEvt() { return this.onLocalStream.expose(); }\r\n        get remoteStreamStartedEvt() { return this.onRemoteStream.expose(); }\r\n        get publisherPublishedEvt() { return this.onPublisherPublished.expose(); }\r\n        get publisherUnpublishedEvt() { return this.onPublisherUnpublished.expose(); }\r\n        get localDisconnectionEvt() { return this.onLocalDisconnection.expose(); }\r\n        get remoteDisconnectionEvt() { return this.onRemoteDisconnection.expose(); }\r\n        get videoOffOptimizationEvt() { return this.videoOffOptimization.expose(); }\r\n        get recordingEvt() { return this.recording.expose(); }\r\n        /**\r\n         * JanusWrapper Constructor\r\n         * @param dispatcherServer\r\n         * @param publisherDivId\r\n         * @param videoContainerDivId\r\n         * @param videoElemId\r\n         * @param username\r\n         * @param password\r\n         * @param showButtons\r\n         * @param acceptCommands\r\n         * @param bitrateStatsEnabled\r\n         * @param autoCapBandwidth\r\n         *\r\n         */\r\n        constructor(params) {\r\n            this.dispatcherServer = params.dispatcherServer;\r\n            this.opaqueId = 'videoroom-' + Janus.randomString(12);\r\n            this.publisherDivId = params.publisherDivId;\r\n            this.videoContainerDivId = params.localVideoContainerDivId;\r\n            this.videoElemId = params.videoElemId;\r\n            this.username = params.username;\r\n            this.password = params.password;\r\n            this.showButtons = params.showButtons;\r\n            this.acceptCommands = params.acceptCommands;\r\n            this.bitrateStatsEnabled = params.bitrateStatsEnabled;\r\n            this.autoCapBandwidth = params.autoCapBandwidth;\r\n        }\r\n        /**\r\n         * Initialize Janus object\r\n         * @param options, JanusJS.InitOptions\r\n         *\r\n         */\r\n        init = (options) => {\r\n            return Janus.init(options);\r\n        };\r\n        /**\r\n         * Initialize connection with dispatcher and create room\r\n         * @param roomId (optional) If not passed the dispatcher will generate one for the client\r\n         * @param roomName\r\n         * @param roomSecret to protect our room from being deleted or modified\r\n         * @param cb(err, res) - Callback function called after create room success or error\r\n         *\r\n         */\r\n        createRoom = (roomId, roomName, roomSecret, cb) => {\r\n            if (!roomName)\r\n                return cb(new Error('Error starting... Missing room to create.'));\r\n            this.room = new Room_1.default(this.dispatcherServer, this.username, this.password, undefined, undefined, roomSecret);\r\n            // ask dispatcher to create room\r\n            this.room.createRoom(roomId, roomName, roomSecret, (err, res) => {\r\n                if (err) {\r\n                    return cb(err);\r\n                }\r\n                cb(null, res);\r\n            });\r\n        };\r\n        /**\r\n         * Destroy room\r\n         * @param roomSecret needed if the room was created with room secret\r\n         * @param cb(err, res) - Callback function called after room destroyed success or error\r\n         *\r\n         */\r\n        destoryRoom = (roomSecret, cb) => {\r\n            this.room.destroyRoom(roomSecret, (err, res) => {\r\n                if (err) {\r\n                    console.error('Error destroying room...');\r\n                    return cb(err);\r\n                }\r\n                cb(null, res);\r\n            });\r\n        };\r\n        /**\r\n         * Register to Janus room\r\n         *\r\n         * @param username - user name\r\n         * @param roomId - room id to register to\r\n         * @param cb(err,res) - Callback function called after room registration success or error\r\n         */\r\n        register = (username, roomId, cb) => {\r\n            if (!this.janusHandle) {\r\n                return cb(new Error('Missing handle. Janus connection and/or room have not started'));\r\n            }\r\n            if (Number.isInteger(roomId)) {\r\n                this.videoClient = new VideoClient_1.default(this.janusHandle, username, roomId);\r\n                this.videoClient.join((err, res) => {\r\n                    if (err) {\r\n                        return cb(err);\r\n                    }\r\n                    this.myusername = username;\r\n                    return cb(null, res);\r\n                });\r\n            }\r\n            else {\r\n                return cb(new Error('Missing room. You will need to create a room or add a room id before you join'));\r\n            }\r\n        };\r\n        janusServerHost = '';\r\n        getJanusServerHost() {\r\n            return this.janusServerHost;\r\n        }\r\n        /**\r\n         * Initialize connection with dispatcher, retrieve server to join room and start Janus session/connection\r\n         * @param roomId\r\n         * @param cb(err,res) - Callback function called after session start success or error\r\n         *\r\n         */\r\n        start = (roomId, cb) => {\r\n            if (!roomId) {\r\n                return cb(new Error('Error starting... Missing room ID to connect to.'));\r\n            }\r\n            this.room = (this.room) ? this.room : new Room_1.default(this.dispatcherServer, this.username, this.password);\r\n            // ask dispatcher to create room\r\n            this.room.getServerForRoom(roomId, (err, res) => {\r\n                if (err) {\r\n                    return console.error(err);\r\n                }\r\n                else if (!res.serverFullUrl) {\r\n                    return console.error('Room not found');\r\n                }\r\n                this.janusServer = (res.serverFullUrl.slice(0, 4) === 'http') ? `${res.serverFullUrl}/janus` : res.serverFullUrl;\r\n                this.stunServer = res.stunServer;\r\n                this.janusServerHost = res.serverHost;\r\n                this.turnServer = res.turnServer;\r\n                this.turnUsername = res.turnUsername;\r\n                this.turnPassword = res.turnPassword;\r\n                this.startJanus(res.token, cb);\r\n            });\r\n        };\r\n        /**\r\n         * Publishes the local video to Janus\r\n         *\r\n         * @param cb(err,res) - Callback function called after publishing success or error\r\n         * @param config object that includes audio and video booleans to publish with audio/video or not\r\n         */\r\n        publish = (cb, config) => {\r\n            const useAudio = config.audio;\r\n            const useVideo = config.video;\r\n            this.videoClient.publish((err, res) => {\r\n                //  use this to keep the previous state if we are re-publishing\r\n                if (this.manuallyMutedAudio) {\r\n                    this.toggleMute();\r\n                }\r\n                else if (this.manuallyMutedVideo) {\r\n                    this.toggleVideo();\r\n                }\r\n                if (config.record) {\r\n                    this.janusHandleHelper.isRecordingSelf = true;\r\n                    this.recording.trigger({ started: true, selfOnly: true });\r\n                }\r\n                cb(err, res);\r\n            }, useAudio, useVideo, config.record);\r\n        };\r\n        /**\r\n         * Stops publishing the local video to Janus\r\n         */\r\n        unpublish = () => this.videoClient.unpublish();\r\n        /**\r\n         * Returns true if the Janus instance is connected to the server, false otherwise\r\n         */\r\n        isConnected = () => {\r\n            if (!this.janus) {\r\n                return false;\r\n            }\r\n            return this.janus.isConnected();\r\n        };\r\n        /**\r\n         * Returns true if client supports WebRTC\r\n         */\r\n        isWebrtcSupported = () => {\r\n            return Janus.isWebrtcSupported();\r\n        };\r\n        detach = () => {\r\n            if (this.janusHandle)\r\n                this.janusHandle.detach(function (data) {\r\n                    console.info('[JanusWrapper detach]', data);\r\n                });\r\n        };\r\n        /**\r\n         * Attach a stream to a video element\r\n         *\r\n         * @param mediaElement - HTML media element where we will be attaching the stream\r\n         * @param stream - Media Stream that we will attach to a dom element\r\n         */\r\n        attachMediaStream = (mediaElement, stream) => Janus.attachMediaStream(mediaElement, stream);\r\n        /**\r\n         * Hot transfer a video room participant to another room\r\n         *\r\n         * @param userId - User id to be transferred\r\n         * @param roomId - Room id to be transferred to\r\n         */\r\n        hotTransfer = (userId, roomId) => {\r\n            const data = JSON.stringify({ 'command': { 'transferTo': roomId }, 'dest': userId });\r\n            this.janusHandle.data({\r\n                data,\r\n                success: () => {\r\n                    console.log(`Transfer command ${data} sent`);\r\n                },\r\n                error: (error) => {\r\n                    throw new Error('Hot transfer error. ' + JSON.stringify(error));\r\n                }\r\n            });\r\n        };\r\n        /**\r\n         * Cap the maximum bitrate for the user\r\n         *\r\n         * @param bitrate - max bps allowed in room\r\n         */\r\n        capBitrate = (bitrate) => {\r\n            if (bitrate === 0) {\r\n                Janus.log(\"Not limiting bandwidth via REMB\");\r\n            }\r\n            else {\r\n                Janus.log(\"Capping bandwidth to \" + bitrate + \" via REMB\");\r\n            }\r\n            return this.janusHandle.send({ message: { request: \"configure\", bitrate: bitrate } });\r\n        };\r\n        /**\r\n         * Toggle mute/unmute and set as onclick function in the 'audioMute' id dom element\r\n         */\r\n        toggleMute = () => {\r\n            if (!this.janusHandle) {\r\n                throw new Error('Missing handle. Janus room has not started');\r\n            }\r\n            let muted = this.janusHandle.isAudioMuted();\r\n            Janus.log((muted ? \"Unmuting\" : \"Muting\") + \" local stream...\");\r\n            if (muted) {\r\n                this.janusHandle.unmuteAudio();\r\n                this.manuallyMutedAudio = false;\r\n            }\r\n            else {\r\n                this.janusHandle.muteAudio();\r\n                this.manuallyMutedAudio = true;\r\n            }\r\n            muted = this.janusHandle.isAudioMuted();\r\n            let audioMuteDivEle = document.getElementById('audioMute');\r\n            if (audioMuteDivEle)\r\n                audioMuteDivEle.innerText = muted ? \"Unmute\" : \"Mute\";\r\n        };\r\n        isAudioMuted = () => {\r\n            return this.janusHandle.isAudioMuted();\r\n        };\r\n        /**\r\n         * Toggle video and set as onclick function in the 'videoOnOff' id dom element\r\n         */\r\n        toggleVideo = () => {\r\n            if (!this.janusHandle) {\r\n                throw new Error('Missing handle. Janus room has not started');\r\n            }\r\n            let muted = this.janusHandle.isVideoMuted();\r\n            Janus.log((muted ? \"publishing video\" : \"unpublishing video\") + \" local stream...\");\r\n            if (muted) {\r\n                this.janusHandle.unmuteVideo();\r\n                this.manuallyMutedVideo = false;\r\n            }\r\n            else {\r\n                this.janusHandle.muteVideo();\r\n                this.manuallyMutedVideo = true;\r\n            }\r\n            muted = this.janusHandle.isVideoMuted();\r\n            let videoOnOffEle = document.getElementById('videoOnOff');\r\n            if (videoOnOffEle)\r\n                videoOnOffEle.innerText = muted ? \"Show Video\" : \"Hide Video\";\r\n        };\r\n        isVideoMuted = () => {\r\n            return this.janusHandle.isVideoMuted();\r\n        };\r\n        /**\r\n         * Toggle recording of the video room (all participants)\r\n         */\r\n        toggleRecording = () => {\r\n            if (!this.janusHandleHelper) {\r\n                throw new Error('Missing handle. Janus room has not started');\r\n            }\r\n            else if (!this.room.roomAdminSecret) {\r\n                throw new Error('Missing secret. You need to be the creator of the room or know the room secret to record');\r\n            }\r\n            let isRecording = this.janusHandleHelper.isRecording;\r\n            Janus.log(isRecording ? \"Stopping recording\" : \"Starting recording\");\r\n            this.janusHandleHelper.record(this.room.roomId, this.room.roomAdminSecret, !isRecording, (err, res) => {\r\n                if (err) {\r\n                    return console.error(err);\r\n                }\r\n                isRecording = this.janusHandleHelper.isRecording;\r\n                this.recording.trigger({ started: isRecording, selfOnly: false });\r\n            });\r\n        };\r\n        /**\r\n         * Toggle recording of the video room (self video only)\r\n         */\r\n        toggleSelfRecording = () => {\r\n            if (!this.janusHandleHelper) {\r\n                throw new Error('Missing handle. Janus room has not started');\r\n            }\r\n            let isRecordingSelf = this.janusHandleHelper.isRecordingSelf;\r\n            Janus.log(isRecordingSelf ? \"Stopping self recording\" : \"Starting self recording\");\r\n            this.janusHandleHelper.recordSelf(!isRecordingSelf, (err, res) => {\r\n                if (err) {\r\n                    return console.error(err);\r\n                }\r\n                isRecordingSelf = this.janusHandleHelper.isRecordingSelf;\r\n                this.recording.trigger({ started: isRecordingSelf, selfOnly: true });\r\n            });\r\n        };\r\n        getMediaDevices = (cb, config) => {\r\n            Janus.listDevices((devices) => {\r\n                try {\r\n                    cb(devices);\r\n                }\r\n                catch (err) {\r\n                    throw new Error(`Failed parsing device error: ${JSON.stringify(err)}`);\r\n                }\r\n            }, config);\r\n        };\r\n        /**\r\n         * Method to display a selection of the available devices and choose them\r\n         *\r\n         * @param config object that includes the types of devices we want to list\r\n         */\r\n        initDeviceSelection = (config) => {\r\n            Janus.listDevices((devices) => {\r\n                try {\r\n                    let devicesEle = document.getElementById('devices');\r\n                    if (devicesEle) {\r\n                        devicesEle.classList.remove('hide');\r\n                        if (devicesEle.parentElement)\r\n                            devicesEle.parentElement.classList.remove('hide');\r\n                    }\r\n                    document.querySelectorAll('#audio-device, #video-device').forEach(element => {\r\n                        element.removeAttribute('option');\r\n                    });\r\n                    try {\r\n                        devices.forEach(function (device) {\r\n                            var label = device.label;\r\n                            if (!label || label === \"\")\r\n                                label = device.deviceId;\r\n                            var option = '<option value=\"' + device.deviceId + '\">' + label + '</option>';\r\n                            if (device.kind === 'audioinput') {\r\n                                let audioDevideEle = document.getElementById('audio-device');\r\n                                if (audioDevideEle)\r\n                                    audioDevideEle.innerHTML = audioDevideEle.innerHTML + option;\r\n                            }\r\n                            else if (device.kind === 'videoinput') {\r\n                                let videoDevice = document.getElementById('video-device');\r\n                                if (videoDevice)\r\n                                    videoDevice.innerHTML = videoDevice.innerHTML + option;\r\n                            }\r\n                        });\r\n                    }\r\n                    catch (err) {\r\n                        throw new Error(`Failed parsing device error: ${JSON.stringify(err)}`);\r\n                    }\r\n                    ;\r\n                    let changeDevicesEle = document.getElementById('change-devices');\r\n                    if (changeDevicesEle) {\r\n                        changeDevicesEle.onclick = () => {\r\n                            // A different device has been selected: hangup the session, and set it up again\r\n                            document.querySelectorAll('#audio-device, #video-device').forEach(element => {\r\n                                element.setAttribute('disabled', 'true');\r\n                            });\r\n                            if (changeDevicesEle)\r\n                                changeDevicesEle.setAttribute('disabled', 'true');\r\n                            // this.videoClient.restartCapture(\r\n                            //   this.cleanRestartDeviceCapture,\r\n                            //   (<HTMLInputElement>document.getElementById('audio-device')), \r\n                            //   (<HTMLInputElement>document.getElementById('video-device')));\r\n                        };\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    throw new Error('Failed to initialize video/audio devices. Error:' + JSON.stringify(e));\r\n                }\r\n            }, config);\r\n        };\r\n        restartCapture = (audioDeviceId, videoDeviceId) => {\r\n            this.videoClient.restartCapture(this.cleanRestartDeviceCapture, audioDeviceId, videoDeviceId);\r\n        };\r\n        /**\r\n         * Destroy Janus session\r\n         */\r\n        destroy = () => this.janus.destroy();\r\n        /**\r\n         * Starts the Janus session/connection using videoroom plugin\r\n         *\r\n         * @remarks\r\n         * This method uses {@link https://janus.conf.meetecho.com/docs/JS.html | janus.js}.\r\n         *\r\n         * @param token - Token to have access to Janus (provided by the dispatcher when calling start())\r\n         * @param cb(err,res) - Callback function called after session start success or error\r\n         *\r\n         */\r\n        startJanus = (token, cb) => {\r\n            let util = new Utils_1.default();\r\n            const iceServers = util.getIceServers(this.stunServer, this.turnServer, this.turnUsername, this.turnPassword);\r\n            this.janus = new Janus({\r\n                server: this.janusServer,\r\n                iceServers,\r\n                token,\r\n                success: () => {\r\n                    // Attach to VideoRoom plugin\r\n                    this.janus.attach({\r\n                        plugin: \"janus.plugin.videoroom\",\r\n                        opaqueId: (!this.room.roomAdminSecret) ? this.opaqueId : `${this.opaqueId}-${this.room.roomAdminSecret}`,\r\n                        success: (pluginHandle) => {\r\n                            Janus.log(\"Plugin attached! (\" + pluginHandle.getPlugin() + \", id=\" + pluginHandle.getId() + \")\");\r\n                            Janus.log(\"  -- This is a publisher/manager\");\r\n                            this.janusHandle = pluginHandle;\r\n                            this.janusHandleHelper = new JanusHandleHelper_1.default(pluginHandle);\r\n                            cb(null, pluginHandle);\r\n                        },\r\n                        error: (error) => {\r\n                            Janus.error(\"  -- Error attaching plugin...\", JSON.stringify(error));\r\n                            cb(new Error(\"Error attaching plugin... \" + JSON.stringify(error)));\r\n                        },\r\n                        consentDialog: (on) => {\r\n                            Janus.debug(\"Consent dialog should be \" + (on ? \"on\" : \"off\") + \" now\");\r\n                        },\r\n                        iceState: (state) => {\r\n                            Janus.log(\"ICE state changed to \" + state);\r\n                        },\r\n                        mediaState: (medium, on) => {\r\n                            Janus.log(\"Janus \" + (on ? \"started\" : \"stopped\") + \" receiving our \" + medium);\r\n                        },\r\n                        webrtcState: (on) => {\r\n                            Janus.log(\"Janus says our WebRTC PeerConnection is \" + (on ? \"up\" : \"down\") + \" now\");\r\n                        },\r\n                        onmessage: (msg, jsep) => {\r\n                            Janus.debug(\" ::: Got a message (publisher) :::\", msg);\r\n                            let event = msg[\"videoroom\"];\r\n                            Janus.debug(\"Event: \" + event);\r\n                            if (event) {\r\n                                if (event === \"joined\") {\r\n                                    // Publisher/manager created, negotiate WebRTC and attach to existing feeds, if any\r\n                                    this.myid = msg[\"id\"];\r\n                                    this.mypvtid = msg[\"private_id\"];\r\n                                    Janus.log(\"Successfully joined room \" + msg[\"room\"] + \" with ID \" + this.myid);\r\n                                    // this.publishOwnFeed(true);\r\n                                    this.onJoinedEvent.trigger(msg);\r\n                                    // Any new feed to attach to that is already in the room?\r\n                                    if (msg[\"publishers\"]) {\r\n                                        let list = msg[\"publishers\"];\r\n                                        Janus.debug(\"Got a list of available publishers/feeds:\", list);\r\n                                        for (let f in list) {\r\n                                            let publisher = new Feed_1.default(list[f]);\r\n                                            this.newRemoteFeed(publisher);\r\n                                        }\r\n                                    }\r\n                                    if (this.bitrateStatsEnabled) {\r\n                                        this.showOutboundStats(5000);\r\n                                    }\r\n                                }\r\n                                else if (event === \"destroyed\") {\r\n                                    // The room has been destroyed\r\n                                    Janus.warn(\"The room has been destroyed!\");\r\n                                    this.onDestroyedEvent.trigger(msg);\r\n                                }\r\n                                else if (event === \"event\") {\r\n                                    // Any new feed to attach to (new publisher)\r\n                                    if (msg[\"publishers\"]) {\r\n                                        let list = msg[\"publishers\"];\r\n                                        Janus.log(\"Got a list of available publishers/feeds:\", list);\r\n                                        for (let f in list) {\r\n                                            let publisher = new Feed_1.default(list[f]);\r\n                                            Janus.debug(\"  >> [\" + publisher.id + \"] \" + publisher.display + \" (audio: \" + publisher.audio_codec + \", video: \" + publisher.video_codec + \")\");\r\n                                            this.newRemoteFeed(publisher);\r\n                                            this.onPublisherPublished.trigger(publisher);\r\n                                        }\r\n                                    }\r\n                                    else if (msg[\"leaving\"]) {\r\n                                        // One of the participants left completely (includes viewer only too)\r\n                                        let leaving = msg[\"leaving\"];\r\n                                        Janus.log(\"Participant/Publisher left: \" + leaving);\r\n                                        let [remoteFeed] = this.feeds.filter(feed => (feed.isRemote && feed.id === leaving));\r\n                                        if (remoteFeed) {\r\n                                            Janus.log(\"Feed \" + remoteFeed.id + \" (\" + remoteFeed.display + \") has left the room, detaching (leaving)\");\r\n                                            this.feeds = this.feeds.filter(feed => (feed.rfindex !== remoteFeed.rfindex));\r\n                                            remoteFeed.janusPluginHandle.detach({});\r\n                                        }\r\n                                    }\r\n                                    else if (msg[\"unpublished\"]) {\r\n                                        // One of the publishers (media sender) has unpublished\r\n                                        let unpublished = msg[\"unpublished\"];\r\n                                        Janus.log(\"Publisher unpublished: \" + unpublished);\r\n                                        if (unpublished === 'ok') {\r\n                                            // That's us\r\n                                            this.janusHandle.hangup();\r\n                                            return;\r\n                                        }\r\n                                        let [remoteFeed] = this.feeds.filter(feed => (feed.isRemote && feed.id === unpublished));\r\n                                        if (remoteFeed) {\r\n                                            Janus.log(\"Feed \" + remoteFeed.id + \" (\" + remoteFeed.display + \") has left the room, detaching (unpublishing)\");\r\n                                            this.onPublisherUnpublished.trigger(remoteFeed);\r\n                                            this.feeds = this.feeds.filter(feed => (feed.rfindex !== remoteFeed.rfindex));\r\n                                            remoteFeed.janusPluginHandle.detach({});\r\n                                        }\r\n                                    }\r\n                                    else if (msg[\"error\"]) {\r\n                                        if (msg[\"error_code\"] === 426) {\r\n                                            // This is a \"no such room\" error: give a more meaningful description\r\n                                            console.log(\"<p>Apparently room <code>\" + this.room.roomId +\r\n                                                \"does not exist...</p><p>Do you have an updated <code>janus.plugin.videoroom.jcfg</code> \" +\r\n                                                \"configuration file? If not, make sure you copy the details of room <code>\" + this.room.roomId + \"</code> \" +\r\n                                                \"from that sample in your current configuration file, then restart Janus and try again.\");\r\n                                        }\r\n                                        else {\r\n                                            console.log(msg[\"error\"]);\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                            if (jsep) {\r\n                                let mystream = this.mystream;\r\n                                Janus.debug(\"Handling SDP as well...\", jsep);\r\n                                this.janusHandle.handleRemoteJsep({ jsep: jsep });\r\n                                // Check if any of the media we wanted to publish has\r\n                                // been rejected (e.g., wrong or unsupported codec)\r\n                                let audio = msg[\"audio_codec\"];\r\n                                if (mystream && mystream.getAudioTracks() && mystream.getAudioTracks().length > 0 && !audio) {\r\n                                    // Audio has been rejected\r\n                                    console.error(\"Our audio stream has been rejected, viewers won't hear us\");\r\n                                }\r\n                                let video = msg[\"video_codec\"];\r\n                                if (mystream && mystream.getVideoTracks() && mystream.getVideoTracks().length > 0 && !video) {\r\n                                    // Video has been rejected\r\n                                    console.error(\"Our video stream has been rejected, viewers won't see us\");\r\n                                    // Hide the webcam video\r\n                                    let videoElemIdEle = document.getElementById(this.videoElemId);\r\n                                    if (videoElemIdEle)\r\n                                        videoElemIdEle.style.display = 'none';\r\n                                    const item = document.getElementById(this.videoContainerDivId);\r\n                                    let newItem = document.createElement('div');\r\n                                    newItem.innerHTML = '<div class=\"no-video-container\">' +\r\n                                        '<i class=\"fa fa-video-camera fa-5 no-video-icon\" style=\"height: 100%;\"></i>' +\r\n                                        '<span class=\"no-video-text\" style=\"font-size: 16px;\">Video rejected, no webcam</span>' +\r\n                                        '</div>';\r\n                                    if (item && item.parentNode)\r\n                                        item.parentNode.replaceChild(newItem, item);\r\n                                }\r\n                            }\r\n                        },\r\n                        onlocalstream: (stream) => {\r\n                            Janus.debug(\" ::: Got a local stream :::\", stream);\r\n                            this.mystream = stream;\r\n                            this.onLocalStream.trigger({ stream: stream });\r\n                            let myvideoDiv = document.getElementById(this.videoElemId);\r\n                            if (!myvideoDiv) {\r\n                                const videolocalDiv = document.querySelectorAll(`#${this.videoContainerDivId}`);\r\n                                videolocalDiv[0].innerHTML = (this.showButtons) ? `\r\n                    <video class=\"rounded centered\" id=${this.videoElemId} disablePictureInPicture width=\"100%\" height=\"100%\" autoplay playsinline muted=\"muted\"></video>\r\n                    <div class=\"btn btn-warning btn-xs\" id=\"audioMute\" style=\"position: absolute; bottom: 0px; left: 0px; margin: 15px;\">Mute</div>\r\n                    <div class=\"btn btn-warning btn-xs\" id=\"videoOnOff\" style=\"position: absolute; bottom: 0px; left: 40%; margin: -20px -50px; margin-bottom: 15px;\">Hide Video</div>`\r\n                                    : `<video class=\"rounded centered\" id=${this.videoElemId} disablePictureInPicture width=\"100%\" height=\"100%\" autoplay playsinline muted=\"muted\"></video>`;\r\n                                let unpublishEle = document.getElementById('unpublish');\r\n                                if (unpublishEle)\r\n                                    unpublishEle.onclick = this.unpublish;\r\n                                let audioMuteEle = document.getElementById('audioMute');\r\n                                if (audioMuteEle)\r\n                                    audioMuteEle.onclick = this.toggleMute;\r\n                                let videoOnOffEle = document.getElementById('videoOnOff');\r\n                                if (videoOnOffEle)\r\n                                    videoOnOffEle.onclick = this.toggleVideo;\r\n                                // let reconnect = document.getElementById('reconnect');\r\n                                // if(reconnect)reconnect.onclick = this.reconnect;\r\n                            }\r\n                            let publisherDivIdEle = document.getElementById(this.publisherDivId);\r\n                            if (publisherDivIdEle)\r\n                                publisherDivIdEle.classList.remove('hide');\r\n                            const publisherDiv = document.getElementById(this.publisherDivId);\r\n                            if (publisherDiv)\r\n                                publisherDiv.value = this.myusername;\r\n                            if (publisherDiv)\r\n                                publisherDiv.style.display = \"block\";\r\n                            Janus.attachMediaStream(document.getElementById(this.videoElemId), stream);\r\n                            document.getElementById(this.videoElemId).muted = true;\r\n                            if (this.janusHandle.webrtcStuff.pc.iceConnectionState !== \"completed\" &&\r\n                                this.janusHandle.webrtcStuff.pc.iceConnectionState !== \"connected\") {\r\n                                // console.log('publishing...')\r\n                            }\r\n                            let videoTracks = stream.getVideoTracks();\r\n                            if (!videoTracks || videoTracks.length === 0) {\r\n                                // No webcam\r\n                                let videoElemIdEle = document.getElementById(this.videoElemId);\r\n                                if (videoElemIdEle)\r\n                                    videoElemIdEle.style.display = \"none\";\r\n                                if (document.querySelectorAll(`#${this.videoContainerDivId} .no-video-container`).length === 0) {\r\n                                    const vDiv = document.querySelectorAll(`#${this.videoContainerDivId}`);\r\n                                    vDiv[0].innerHTML = (this.showButtons) ? (`\r\n                        <div class=\"no-video-container\">\r\n                        <i class=\"fa fa-video-camera fa-5 no-video-icon\"></i>\r\n                        <span class=\"no-video-text\">No webcam available</span>\r\n                        </div>\r\n                        <div class=\"btn btn-warning btn-xs\" id=\"audioMute\" style=\"position: absolute; bottom: 0px; left: 0px; margin: 15px;\">Mute</div>`)\r\n                                        : (`\r\n                        <div class=\"no-video-container\">\r\n                        <i class=\"fa fa-video-camera fa-5 no-video-icon\"></i>\r\n                        <span class=\"no-video-text\">No webcam available</span>\r\n                        </div>`);\r\n                                    let audioMuteEle = document.getElementById('audioMute');\r\n                                    if (audioMuteEle)\r\n                                        audioMuteEle.onclick = this.toggleMute;\r\n                                    let unpublishEle = document.getElementById('unpublish');\r\n                                    if (unpublishEle)\r\n                                        unpublishEle.onclick = this.unpublish;\r\n                                    let publishEle = document.getElementById('publish');\r\n                                    if (publishEle)\r\n                                        publishEle.onclick = () => this.publish((err, res) => {\r\n                                            if (err)\r\n                                                throw new Error(err);\r\n                                        }, { audio: !this.janusHandle.isAudioMuted(), video: true });\r\n                                    // let reconnectEle = document.getElementById('reconnect');\r\n                                    // if(reconnectEle) reconnectEle.onclick = this.reconnect;\r\n                                }\r\n                            }\r\n                            else {\r\n                                // document.querySelector(`#${this.videoContainerDivId} .no-video-container`).setAttribute('class','');\r\n                                let videoElemIdEle = document.getElementById(this.videoElemId);\r\n                                if (videoElemIdEle) {\r\n                                    videoElemIdEle.classList.remove('hide');\r\n                                    videoElemIdEle.style.display = \"block\";\r\n                                }\r\n                                if (this.autoCapBandwidth) {\r\n                                    this.autoAdapterVideo();\r\n                                }\r\n                            }\r\n                        },\r\n                        onremotestream: (stream) => {\r\n                            // The publisher stream is sendonly, we don't expect anything here\r\n                        },\r\n                        slowLink: (state) => {\r\n                            this.slowLinkTimes++;\r\n                            if (!this.autoCapBandwidth)\r\n                                return;\r\n                            if (this.slowLinkTimes > Math.floor(this.slowLinkTimesThreshold / 4) && !this.autoCapped) {\r\n                                this.autoCapped = true;\r\n                                this.capBitrate(256000);\r\n                            }\r\n                            else if (this.slowLinkTimes > this.slowLinkTimesThreshold && !this.janusHandle.isVideoMuted()) {\r\n                                this.toggleVideo();\r\n                                this.videoOffOptimization.trigger();\r\n                            }\r\n                        },\r\n                        oncleanup: () => {\r\n                            Janus.log(\" ::: Got a cleanup notification: we are unpublished now :::\");\r\n                            if (this.reconnecting) {\r\n                                console.log('Reconnecting :: Trying to publish...');\r\n                                if (this.republished === false) {\r\n                                    this.publish((err, res) => {\r\n                                        if (err) {\r\n                                            console.error('Reconnecting :: Error while trying to reconnect:', err);\r\n                                        }\r\n                                        this.reconnecting = false;\r\n                                        this.republished = false;\r\n                                    }, this.mediaConstraints);\r\n                                }\r\n                                this.republished = true;\r\n                            }\r\n                            else {\r\n                                this.mystream = null;\r\n                                this.onLocalDisconnection.trigger();\r\n                                // $(\"#videolocal\").parent().parent().unblock();\r\n                            }\r\n                        }\r\n                    });\r\n                },\r\n                error: (error) => {\r\n                    Janus.error(\"  -- Error starting janus instantiation...\", error);\r\n                    this.reconnectHelper(this.reconnectTimeout, 2, cb, error);\r\n                },\r\n                destroyed: () => {\r\n                    Janus.log(\"  -- Destroyed janus instantiation...\");\r\n                    this.feeds = [];\r\n                    // window.location.reload();\r\n                }\r\n            });\r\n        };\r\n        /**\r\n         * Reconnect helper with recursive timeout backoff\r\n         *\r\n         * @param reconnectionTimeout - Timout before the first reconnection\r\n         * @param times - Times to try to reconnect\r\n         * @param cb\r\n         * @param errMsg\r\n         */\r\n        reconnectHelper = (reconnectionTimeout, times, cb, errMsg) => {\r\n            Janus.log(`  -- Trying to reconnect in ${Math.floor(reconnectionTimeout / 1000)}sec...`);\r\n            if (times > 0) {\r\n                times--;\r\n                window.setTimeout(() => {\r\n                    this.janus.reconnect({\r\n                        success: () => {\r\n                            Janus.log(\"Session successfully reclaimed:\", this.janus.getSessionId());\r\n                            cb(null, this.janusHandle);\r\n                        },\r\n                        error: (err) => {\r\n                            Janus.error(\"Failed to reconnect:\", err);\r\n                            this.reconnectHelper(2 * reconnectionTimeout, times, cb, errMsg);\r\n                        }\r\n                    });\r\n                }, reconnectionTimeout, cb);\r\n            }\r\n            else {\r\n                cb(new Error(\"Error starting janus instantiation...\" + errMsg));\r\n            }\r\n        };\r\n        /**\r\n         * Destroy and rejoin a new room\r\n         *\r\n         * @param roomId - room id\r\n         */\r\n        selfTransfer = (roomId) => {\r\n            this.janus.destroy({\r\n                success: () => {\r\n                    this.start(roomId, (err, resHandle) => {\r\n                        if (err) {\r\n                            return console.error(err);\r\n                        }\r\n                        this.register(this.myusername, roomId, (err, res) => {\r\n                            if (err) {\r\n                                return console.error(`Registration error. ${err}`);\r\n                            }\r\n                            console.log(`Self transfer success! Registered to ${roomId}`);\r\n                        });\r\n                    });\r\n                },\r\n                error: (error) => {\r\n                    Janus.error(\"  -- Error destroying connection...\", error);\r\n                }\r\n            });\r\n        };\r\n        /**\r\n         * Process new remote publisher and subscribe to it\r\n         *\r\n         * @param feed - Feed object\r\n         */\r\n        newRemoteFeed = (feed) => {\r\n            let remoteFeedHandle = null;\r\n            let feedIndex = null;\r\n            this.janus.attach({\r\n                plugin: \"janus.plugin.videoroom\",\r\n                opaqueId: this.opaqueId,\r\n                success: (pluginHandle) => {\r\n                    remoteFeedHandle = pluginHandle;\r\n                    remoteFeedHandle.simulcastStarted = false;\r\n                    Janus.log(\"Plugin attached! (\" + remoteFeedHandle.getPlugin() + \", id=\" + remoteFeedHandle.getId() + \")\");\r\n                    Janus.log(`  -- This is a subscriber for room ${this.room.roomId}`);\r\n                    // We wait for the plugin to send us an offer\r\n                    let subscribe = {\r\n                        request: \"join\",\r\n                        room: this.room.roomId,\r\n                        ptype: \"subscriber\",\r\n                        feed: feed.id,\r\n                        private_id: this.mypvtid\r\n                    };\r\n                    // In case you don't want to receive audio, video or data, even if the\r\n                    // publisher is sending them, set the 'offer_audio', 'offer_video' or\r\n                    // 'offer_data' properties to false (they're true by default), e.g.:\r\n                    // \t\tsubscribe[\"offer_video\"] = false;\r\n                    // For example, if the publisher is VP8 and this is Safari, let's avoid video\r\n                    if (Janus.webRTCAdapter.browserDetails.browser === \"safari\" &&\r\n                        (feed.video_codec === \"vp9\" || (feed.video_codec === \"vp8\" && !Janus.safariVp8))) {\r\n                        if (feed.video_codec)\r\n                            feed.video_codec = feed.video_codec.toUpperCase();\r\n                        console.log(\"Publisher is using \" + feed.video_codec + \", but Safari doesn't support it: disabling video\");\r\n                        subscribe[\"offer_video\"] = false;\r\n                    }\r\n                    remoteFeedHandle.videoCodec = feed.video_codec;\r\n                    remoteFeedHandle.send({ message: subscribe });\r\n                },\r\n                error: (error) => {\r\n                    Janus.error(\"  -- Error attaching plugin...\", JSON.stringify(error));\r\n                    console.error(\"Error attaching plugin... \" + JSON.stringify(error));\r\n                },\r\n                onmessage: (msg, jsep) => {\r\n                    Janus.debug(\" ::: Got a message (subscriber) :::\", msg);\r\n                    let event = msg[\"videoroom\"];\r\n                    Janus.debug(\"Event: \" + event);\r\n                    if (msg[\"error\"]) {\r\n                        console.error(msg[\"error\"]);\r\n                    }\r\n                    else if (event) {\r\n                        if (event === \"attached\") {\r\n                            // Subscriber created and attached\r\n                            this.feeds.push(feed);\r\n                            feedIndex = this.feeds.indexOf(feed);\r\n                            this.feeds[feedIndex].janusPluginHandle = remoteFeedHandle;\r\n                            this.feeds[feedIndex].rfindex = feedIndex;\r\n                            this.feeds[feedIndex].isRemote = true;\r\n                            Janus.log(\"Successfully attached to feed \" + this.feeds[feedIndex].id + \" (\" + this.feeds[feedIndex].display + \") in room \" + msg[\"room\"]);\r\n                            const feedElem = document.getElementById(`remote${feedIndex}`);\r\n                            if (feedElem)\r\n                                feedElem.classList.remove('hide');\r\n                            if (feedElem)\r\n                                feedElem.innerHTML = this.feeds[feedIndex].display;\r\n                        }\r\n                        else if (event === \"event\") {\r\n                            // Check if we got a simulcast-related event from this publisher\r\n                            let substream = msg[\"substream\"];\r\n                            let temporal = msg[\"temporal\"];\r\n                            if ((substream !== null && substream !== undefined) || (temporal !== null && temporal !== undefined)) {\r\n                                // TODO handle simulcast conf\r\n                                // if(!remoteFeedHandle.simulcastStarted) {\r\n                                // \t\tremoteFeedHandle.simulcastStarted = true;\r\n                                // \t\t// Add some new buttons\r\n                                // \t\taddSimulcastButtons(remoteFeedHandle.rfindex, remoteFeedHandle.videoCodec === \"vp8\" || remoteFeedHandle.videoCodec === \"h264\");\r\n                                // }\r\n                                // // We just received notice that there's been a switch, update the buttons\r\n                                // updateSimulcastButtons(remoteFeedHandle.rfindex, substream, temporal);\r\n                            }\r\n                        }\r\n                        else {\r\n                            // What has just happened?\r\n                        }\r\n                    }\r\n                    if (jsep) {\r\n                        Janus.debug(\"Handling SDP as well...\", jsep);\r\n                        // Answer and attach\r\n                        remoteFeedHandle.createAnswer({\r\n                            jsep: jsep,\r\n                            media: { audioSend: false, videoSend: false, data: true },\r\n                            success: (jsep) => {\r\n                                Janus.debug(\"Got SDP!\", jsep);\r\n                                let body = { request: \"start\", room: this.room.roomId };\r\n                                remoteFeedHandle.send({ message: body, jsep: jsep });\r\n                            },\r\n                            error: (error) => {\r\n                                Janus.error(\"WebRTC error:\", error);\r\n                                console.error(\"WebRTC error... \" + error.message);\r\n                            }\r\n                        });\r\n                    }\r\n                },\r\n                iceState: (state) => {\r\n                    Janus.log(\"ICE state of this WebRTC PeerConnection (feed #\" + feedIndex + \") changed to \" + state);\r\n                },\r\n                webrtcState: (on) => {\r\n                    Janus.log(\"Janus says this WebRTC PeerConnection (feed #\" + feedIndex + \") is \" + (on ? \"up\" : \"down\") + \" now\");\r\n                },\r\n                onlocalstream: (stream) => {\r\n                    // The subscriber stream is recvonly, we don't expect anything here\r\n                },\r\n                onremotestream: (stream) => {\r\n                    Janus.debug(\"Remote feed #\" + this.feeds[feedIndex].rfindex + \", stream:\", stream);\r\n                    this.onRemoteStream.trigger({ stream: stream, rfindex: this.feeds[feedIndex].rfindex });\r\n                    if (this.bitrateStatsEnabled) {\r\n                        const feedDivStat = document.getElementById(`bitrateIn${feedIndex}`);\r\n                        if (feedDivStat)\r\n                            this.showInboundStats(feedDivStat, this.feeds[feedIndex].janusPluginHandle);\r\n                    }\r\n                },\r\n                ondata: (data) => {\r\n                    const json = JSON.parse(data);\r\n                    const command = json.command;\r\n                    const receiver = json.dest;\r\n                    if (!this.acceptCommands || receiver !== this.myid) {\r\n                        return;\r\n                    }\r\n                    const newRoomId = command.transferTo;\r\n                    if (newRoomId) {\r\n                        this.selfTransfer(newRoomId);\r\n                    }\r\n                    else {\r\n                        console.error('Unknown command: ' + command);\r\n                    }\r\n                },\r\n                oncleanup: () => {\r\n                    Janus.log(\" ::: Got a cleanup notification (remote feed \" + feedIndex + \") :::\");\r\n                    if (Number.isInteger(feedIndex))\r\n                        this.onRemoteDisconnection.trigger(feedIndex);\r\n                    remoteFeedHandle.simulcastStarted = false;\r\n                    // document.querySelector('#simulcast'+remoteFeedHandle.rfindex).remove();\r\n                }\r\n            });\r\n        };\r\n        /**\r\n         * Time interval to automatically adapt video.\r\n         * Turns On video back and disables the bitrate cap if we didn't reach the threshold in the specified interval\r\n         *\r\n         * @param interval - number in milisecons\r\n         */\r\n        autoAdapterVideo = (interval) => {\r\n            window.setInterval(() => {\r\n                if (this.slowLinkTimes < this.slowLinkTimesThreshold) {\r\n                    if (this.janusHandle.isVideoMuted() && this.autoCapped)\r\n                        this.toggleVideo();\r\n                    if (this.autoCapped) {\r\n                        this.capBitrate(0);\r\n                        this.autoCapped = false;\r\n                    }\r\n                }\r\n                this.slowLinkTimes = 0;\r\n            }, interval || 16000);\r\n        };\r\n        /**\r\n         * Helper for show outbound stats\r\n         *\r\n         * @param interval - number in milisecons\r\n         */\r\n        showOutboundStats = (interval) => {\r\n            let bitrateDivOut = document.getElementById('bitrateOut');\r\n            window.setInterval(() => {\r\n                if (this.janusHandle.webrtcStuff.pc) {\r\n                    this.janusHandle.webrtcStuff.pc.getStats(null)\r\n                        .then(stats => this.showOutboundStatsHelper(bitrateDivOut, stats), err => console.log(err));\r\n                }\r\n                else {\r\n                    console.log('Outbound stream not connected to janus yet');\r\n                    if (bitrateDivOut && bitrateDivOut.innerText) {\r\n                        bitrateDivOut.innerHTML = `Bitrate: 0 kbits/sec`;\r\n                    }\r\n                }\r\n            }, interval || 5000, bitrateDivOut);\r\n        };\r\n        /**\r\n         * Show outbound stats in div element\r\n         *\r\n         * @param div - HTMLElement to display in\r\n         * @param interval - number in milisecons\r\n         */\r\n        showOutboundStatsHelper = (div, results) => {\r\n            results.forEach(report => {\r\n                const now = report.timestamp;\r\n                let bitrate;\r\n                if (report.type === 'outbound-rtp' && report.mediaType === 'video' && !this.janusHandle.isVideoMuted()) {\r\n                    const bytes = report.bytesSent;\r\n                    if (this.prevStat.type === 'video' && this.prevStat.time) {\r\n                        bitrate = 8 * (bytes - this.prevStat.bytes) / (now - this.prevStat.time);\r\n                        bitrate = Math.floor(bitrate);\r\n                    }\r\n                    this.prevStat.type = 'video';\r\n                    this.prevStat.bytes = bytes;\r\n                    this.prevStat.time = now;\r\n                }\r\n                else if (report.type === 'outbound-rtp' && report.mediaType === 'audio' && this.janusHandle.isVideoMuted()) {\r\n                    const audioBytes = report.bytesSent;\r\n                    if (this.prevStat.type === 'audio' && this.prevStat.time) {\r\n                        bitrate = 8 * (audioBytes - this.prevStat.bytes) / (now - this.prevStat.time);\r\n                        bitrate = Math.floor(bitrate);\r\n                    }\r\n                    this.prevStat.type = 'audio';\r\n                    this.prevStat.bytes = audioBytes;\r\n                    this.prevStat.time = now;\r\n                }\r\n                if (bitrate >= 0) {\r\n                    bitrate += ' kbits/sec';\r\n                    if (div)\r\n                        div.innerHTML = `Bitrate: ${bitrate}`;\r\n                }\r\n                else if (bitrate === 0) {\r\n                    if (div)\r\n                        div.innerHTML = `Bitrate: 0 kbits/sec`;\r\n                }\r\n            });\r\n        };\r\n        /**\r\n         * Show inbound stats in div element\r\n         *\r\n         * @param div - HTMLElement to display in\r\n         * @param feedHandle - subscriber handle to get stats from\r\n         * @param interval - number in milisecons\r\n         */\r\n        showInboundStats = (div, feedHandle, interval) => {\r\n            const feed = this.feeds[div.id.slice(div.id.length - 1)];\r\n            if (Number.isInteger(feed.intervalId))\r\n                return;\r\n            const newFeedHandle = feedHandle;\r\n            this.feeds[div.id.slice(div.id.length - 1)].intervalId = window.setInterval((div, feedHandle, feed) => {\r\n                if (feedHandle.webrtcStuff.pc && ['new', 'connecting', 'connected',].includes(feedHandle.webrtcStuff.pc.connectionState)) {\r\n                    let bitrate = feedHandle.getBitrate();\r\n                    if (bitrate) {\r\n                        div.innerHTML = `Bitrate: ${bitrate}`;\r\n                    }\r\n                    else if (bitrate === 0) {\r\n                        div.innerHTML = `Bitrate: 0 kbits/sec`;\r\n                    }\r\n                }\r\n                else {\r\n                    clearInterval(feed.intervalId);\r\n                    if (div.innerText) {\r\n                        div.innerHTML = ``;\r\n                    }\r\n                }\r\n            }, interval || 5000, div, newFeedHandle, feed);\r\n        };\r\n        /**\r\n         * Helper method to clean UI after successful recconnection using new device/s\r\n         *\r\n         * @param err - Error\r\n         * @param res - Response\r\n         */\r\n        cleanRestartDeviceCapture = (err, res) => {\r\n            if (err) {\r\n                throw new Error(`Restart connection with new device failed: ${JSON.stringify(err)}`);\r\n            }\r\n            document.querySelectorAll('#audio-device, #video-device, #change-devices').forEach(element => {\r\n                element.removeAttribute('disabled');\r\n            });\r\n            if (this.manuallyMutedAudio && res.modifiedAudio) {\r\n                this.toggleMute();\r\n            }\r\n            if (this.manuallyMutedVideo && res.modifiedVideo) {\r\n                this.toggleVideo();\r\n            }\r\n        };\r\n        /**\r\n         * Helper method that reconnect stream\r\n         */\r\n        reconnect = (mediaConstraints) => {\r\n            console.log('Reconnecting :: Unpublishing...');\r\n            this.mediaConstraints = mediaConstraints;\r\n            this.reconnecting = true;\r\n            this.unpublish();\r\n        };\r\n    }\r\n    exports.default = JanusWrapper;\r\n});\r\n","define([\"require\", \"exports\"], function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    /** Unless otherwise licensed, the software is our proprietary property and all source code, database,\r\n    * functionality, website design, audio, video, text, photographs and graphics on the site or the product (\r\n    * collectively, the “Content”) and the trademarks, service marks, and logos contained therein ( the\r\n    * “Marks”) are owned or controlled by us or licenses to us, and are protected by the copyright and\r\n    * trademark laws and various other intellectual property rights and unfair competition laws in domestic as\r\n    * well as in foreign jurisdictions and international conventions.\r\n    */\r\n    const Janus = require('./third-party/janus/janusBundle');\r\n    class Room {\r\n        dispatcherServer;\r\n        roomId;\r\n        roomName;\r\n        username;\r\n        password;\r\n        roomAdminSecret;\r\n        constructor(dispatcherServer, username, password, roomId, roomName, roomAdminSecret) {\r\n            this.dispatcherServer = dispatcherServer;\r\n            if (roomName) {\r\n                this.roomName = roomName;\r\n            }\r\n            else {\r\n                this.roomName = `randomRoom-${Janus.randomString(12)}`;\r\n            }\r\n            this.roomId = roomId;\r\n            this.username = username;\r\n            this.password = password;\r\n            this.roomAdminSecret = roomAdminSecret;\r\n        }\r\n        createRoom(roomId, roomName, roomSecret, cb) {\r\n            let myHeaders = new Headers();\r\n            myHeaders.append(\"Content-Type\", \"application/json\");\r\n            myHeaders.append('Authorization', 'Basic ' + btoa(this.username + \":\" + this.password));\r\n            let raw = (roomId) ? JSON.stringify({ roomId, roomName, \"secret\": roomSecret }) :\r\n                JSON.stringify({ roomName, \"secret\": roomSecret });\r\n            let requestOptions = {\r\n                method: 'POST',\r\n                headers: myHeaders,\r\n                body: raw\r\n            };\r\n            fetch(`${this.dispatcherServer}/create`, requestOptions)\r\n                .then(res => {\r\n                res.json().then(data => {\r\n                    this.roomId = data.roomId;\r\n                    this.roomName = roomName;\r\n                    cb(null, data);\r\n                });\r\n            }).catch(err => cb(err));\r\n        }\r\n        getServerForRoom(roomId, cb) {\r\n            let myHeaders = new Headers();\r\n            myHeaders.append('Authorization', 'Basic ' + btoa(this.username + \":\" + this.password));\r\n            let requestOptions = {\r\n                method: 'GET',\r\n                headers: myHeaders\r\n            };\r\n            fetch(`${this.dispatcherServer}/room-server/${roomId}`, requestOptions)\r\n                .then(res => {\r\n                res.json().then(data => {\r\n                    this.roomId = roomId;\r\n                    // this.roomName = data.roomName;\r\n                    cb(null, data);\r\n                });\r\n            })\r\n                .catch(err => cb(err));\r\n        }\r\n        destroyRoom(roomSecret, cb) {\r\n            if (!this.roomId) {\r\n                return cb(new Error('Missing room Id'));\r\n            }\r\n            let myHeaders = new Headers();\r\n            myHeaders.append(\"Content-Type\", \"application/json\");\r\n            myHeaders.append('Authorization', 'Basic ' + btoa(this.username + \":\" + this.password));\r\n            let raw = JSON.stringify({ \"roomId\": this.roomId, \"secret\": roomSecret });\r\n            let requestOptions = {\r\n                method: 'POST',\r\n                headers: myHeaders,\r\n                body: raw\r\n            };\r\n            fetch(`${this.dispatcherServer}/destroy`, requestOptions)\r\n                .then(res => {\r\n                cb(null, true);\r\n            }).catch(err => cb(err));\r\n        }\r\n    }\r\n    exports.default = Room;\r\n});\r\n","define([\"require\", \"exports\"], function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    /** Unless otherwise licensed, the software is our proprietary property and all source code, database,\r\n    * functionality, website design, audio, video, text, photographs and graphics on the site or the product (\r\n    * collectively, the “Content”) and the trademarks, service marks, and logos contained therein ( the\r\n    * “Marks”) are owned or controlled by us or licenses to us, and are protected by the copyright and\r\n    * trademark laws and various other intellectual property rights and unfair competition laws in domestic as\r\n    * well as in foreign jurisdictions and international conventions.\r\n    */\r\n    class Utils {\r\n        randomInteger(pow) {\r\n            return Math.floor(Math.random() * pow);\r\n        }\r\n        ;\r\n        getIceServers(stun, turn, turnUsername, turnPassword) {\r\n            const stunServer = (stun) ? { urls: stun } : null;\r\n            const turnServer = (turn) ? {\r\n                urls: turn,\r\n                credential: turnPassword,\r\n                username: turnUsername\r\n            } : null;\r\n            const iceServers = [{\r\n                    urls: \"stun:stun.l.google.com:19302\"\r\n                }];\r\n            if (stunServer)\r\n                iceServers.push(stunServer);\r\n            if (turnServer)\r\n                iceServers.push(turnServer);\r\n            return iceServers;\r\n        }\r\n    }\r\n    exports.default = Utils;\r\n});\r\n","define([\"require\", \"exports\"], function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    /** Unless otherwise licensed, the software is our proprietary property and all source code, database,\r\n    * functionality, website design, audio, video, text, photographs and graphics on the site or the product (\r\n    * collectively, the “Content”) and the trademarks, service marks, and logos contained therein ( the\r\n    * “Marks”) are owned or controlled by us or licenses to us, and are protected by the copyright and\r\n    * trademark laws and various other intellectual property rights and unfair competition laws in domestic as\r\n    * well as in foreign jurisdictions and international conventions.\r\n    */\r\n    const Janus = require('./third-party/janus/janusBundle');\r\n    class VideoClient {\r\n        clientId;\r\n        username;\r\n        janusPluginHandle;\r\n        roomId;\r\n        audioDeviceId = null;\r\n        videoDeviceId = null;\r\n        constructor(pluginHandle, displayUsername, roomId) {\r\n            this.janusPluginHandle = pluginHandle;\r\n            if (displayUsername) {\r\n                this.username = displayUsername;\r\n            }\r\n            if (roomId) {\r\n                this.roomId = roomId;\r\n            }\r\n        }\r\n        join(cb, displayUsername, roomId) {\r\n            if (!roomId && !this.roomId) {\r\n                return cb(new Error('missing room to join'));\r\n            }\r\n            const register = {\r\n                request: \"join\",\r\n                room: (roomId) ? roomId : this.roomId,\r\n                ptype: \"publisher\",\r\n                display: displayUsername || this.username\r\n            };\r\n            this.janusPluginHandle.send({\r\n                message: register,\r\n                success: (res) => {\r\n                    cb(null, res);\r\n                },\r\n                error: (err) => {\r\n                    cb(err);\r\n                }\r\n            });\r\n        }\r\n        publish(cb, useAudio, useVideo = true, record) {\r\n            const janusHandle = this.janusPluginHandle;\r\n            // const publishDiv = document.getElementById(publishDivId);\r\n            janusHandle.createOffer({\r\n                media: { audioRecv: false, videoRecv: false, audioSend: useAudio, videoSend: useVideo, data: true },\r\n                // simulcast: doSimulcast,\r\n                // simulcast2: doSimulcast2,\r\n                success: (jsep) => {\r\n                    Janus.debug(\"Got publisher SDP!\", jsep);\r\n                    var publish = { request: \"configure\", audio: useAudio, video: useVideo, record };\r\n                    // You can force a specific codec to use when publishing by using the\r\n                    // audiocodec and videocodec properties, for instance:\r\n                    // \t\tpublish[\"audiocodec\"] = \"opus\"\r\n                    // to force Opus as the audio codec to use, or:\r\n                    // \t\tpublish[\"videocodec\"] = \"vp9\"\r\n                    // to force VP9 as the videocodec to use. In both case, though, forcing\r\n                    // a codec will only work if: (1) the codec is actually in the SDP (and\r\n                    // so the browser supports it), and (2) the codec is in the list of\r\n                    // allowed codecs in a room. With respect to the point (2) above,\r\n                    // refer to the text in janus.plugin.videoroom.jcfg for more details\r\n                    janusHandle.send({\r\n                        message: publish,\r\n                        jsep: jsep,\r\n                        success: function (res) {\r\n                            cb(null, res);\r\n                        },\r\n                        error: function (err) {\r\n                            cb(err);\r\n                        }\r\n                    });\r\n                },\r\n                error: (error) => {\r\n                    Janus.error(\"WebRTC error (publish):\", error);\r\n                    // todo below in event callback\r\n                    // if (publishDiv){\r\n                    //     publishDiv.classList.remove('disabled');\r\n                    //     publishDiv.onclick = () => {\r\n                    //         this.publish(true, publishDivId, useAudio);\r\n                    //     };\r\n                    // }\r\n                    return cb(new Error(`WebRTC error: ${JSON.stringify(error)}`));\r\n                }\r\n            });\r\n        }\r\n        unpublish() {\r\n            let unpublish = { request: \"unpublish\" };\r\n            this.janusPluginHandle.send({ message: unpublish });\r\n        }\r\n        restartCapture = (cb, audioDeviceId, videoDeviceId) => {\r\n            const janusHandle = this.janusPluginHandle;\r\n            let body = { request: \"configure\", audio: true, video: true };\r\n            Janus.debug(\"Sending message:\", body);\r\n            janusHandle.send({ message: body });\r\n            Janus.debug(\"Trying a createOffer too (audio/video sendrecv)\");\r\n            let replaceAudio = audioDeviceId !== this.audioDeviceId;\r\n            this.audioDeviceId = audioDeviceId;\r\n            let replaceVideo = videoDeviceId !== this.videoDeviceId;\r\n            this.videoDeviceId = videoDeviceId;\r\n            janusHandle.createOffer({\r\n                // We provide a specific device ID for both audio and video\r\n                media: {\r\n                    audio: {\r\n                        deviceId: {\r\n                            exact: this.audioDeviceId\r\n                        }\r\n                    },\r\n                    replaceAudio: replaceAudio,\r\n                    video: {\r\n                        deviceId: {\r\n                            exact: this.videoDeviceId\r\n                        }\r\n                    },\r\n                    replaceVideo: replaceVideo,\r\n                    data: true // Let's negotiate data channels as well\r\n                },\r\n                success: function (jsep) {\r\n                    Janus.debug(\"Got SDP!\", jsep);\r\n                    janusHandle.send({ message: body, jsep: jsep });\r\n                    cb(null, { modifiedAudio: replaceAudio, modifiedVideo: replaceVideo, jsep: jsep });\r\n                },\r\n                error: function (error) {\r\n                    Janus.error(\"WebRTC error:\", error);\r\n                    cb(error);\r\n                }\r\n            });\r\n        };\r\n    }\r\n    exports.default = VideoClient;\r\n});\r\n","define([\"require\", \"exports\"], function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.ClientType = exports.AckResponseTypes = exports.BrokerTypes = exports.MessageType = exports.ClientDetails = exports.BrokerConf = void 0;\r\n    /** Unless otherwise licensed, the software is our proprietary property and all source code, database,\r\n    * functionality, website design, audio, video, text, photographs and graphics on the site or the product (\r\n    * collectively, the “Content”) and the trademarks, service marks, and logos contained therein ( the\r\n    * “Marks”) are owned or controlled by us or licenses to us, and are protected by the copyright and\r\n    * trademark laws and various other intellectual property rights and unfair competition laws in domestic as\r\n    * well as in foreign jurisdictions and international conventions.\r\n    */\r\n    class BrokerConf {\r\n        fullyQualifiedURL;\r\n        //in case of BrokerType WEB_RTC\r\n        iceServers;\r\n        retryPolicy;\r\n        constructor(fullyQualifiedURL, iceServers, retryPolicy) {\r\n            this.fullyQualifiedURL = fullyQualifiedURL;\r\n            this.iceServers = iceServers;\r\n            this.retryPolicy = retryPolicy;\r\n        }\r\n    }\r\n    exports.BrokerConf = BrokerConf;\r\n    class ClientDetails {\r\n        /**\r\n         * @id client-id\r\n         */\r\n        id;\r\n        /**\r\n         * @name client name\r\n         */\r\n        name;\r\n        /**\r\n         * @additionalDetails clients additional details stored in key:value format like(email or contact-number)\r\n         */\r\n        additionalDetails;\r\n        constructor(id, name, additionalDetails) {\r\n            this.id = id;\r\n            this.name = name;\r\n            this.additionalDetails = additionalDetails;\r\n        }\r\n    }\r\n    exports.ClientDetails = ClientDetails;\r\n    var MessageType;\r\n    (function (MessageType) {\r\n        MessageType[\"CLIENT_TYPE_MESSAGE\"] = \"CLIENT_TYPE_MESSAGE\";\r\n        MessageType[\"CLIENT_INFORMATION_MESSAGE\"] = \"CLIENT_INFORMATION_MESSAGE\";\r\n        MessageType[\"REGISTER_TO_BROKER\"] = \"REGISTER_TO_BROKER\";\r\n        MessageType[\"REGISTERATION_DONE\"] = \"REGISTERATION_DONE\";\r\n        MessageType[\"REGISTERATION_FAILED\"] = \"REGISTERATION_FAILED\";\r\n        MessageType[\"OFFER_REQUESTED\"] = \"OFFER_REQUESTED\";\r\n        MessageType[\"OFFER_REJECTED\"] = \"OFFER_REJECTED\";\r\n        MessageType[\"OFFER_RECEIVED\"] = \"OFFER_RECEIVED\";\r\n        MessageType[\"ANSWER_INITIATED\"] = \"ANSWER_INITIATED\";\r\n        MessageType[\"ANSWER_RECEIVED\"] = \"ANSWER_RECEIVED\";\r\n        MessageType[\"MESSAGE_SEND\"] = \"MESSAGE_SEND\";\r\n        MessageType[\"MESSAGE_RECEIVED\"] = \"MESSAGE_RECEIVED\";\r\n        MessageType[\"MESSAGE_SNEAK\"] = \"MESSAGE_SNEAK\";\r\n        MessageType[\"CLIENT_SESSION_REQUESTED\"] = \"CLIENT_SESSION_REQUESTED\";\r\n        MessageType[\"CLIENT_SESSION_JOINED\"] = \"CLIENT_SESSION_JOINED\";\r\n        MessageType[\"CLIENT_SESSION_LEAVE\"] = \"CLIENT_SESSION_LEAVE\";\r\n        MessageType[\"SESSION_CLOSE_REQUEST\"] = \"SESSION_CLOSE_REQUEST\";\r\n        MessageType[\"SESSION_CLOSED\"] = \"SESSION_CLOSED\";\r\n        MessageType[\"ON_SESSION_CLOSE_REQUEST\"] = \"ON_SESSION_CLOSE_REQUEST\";\r\n        MessageType[\"SESSION_SYNC_REQUEST\"] = \"SESSION_SYNC_REQUEST\";\r\n        MessageType[\"SESSION_SYNC_RESPONSE\"] = \"SESSION_SYNC_RESPONSE\";\r\n        MessageType[\"SESSION_TRANSFER_OFFERED\"] = \"SESSION_TRANSFER_OFFERED\";\r\n        MessageType[\"SESSION_TRANSFER_ACCEPTED\"] = \"SESSION_TRANSFER_ACCEPTED\";\r\n        MessageType[\"SESSION_TRASFER_FAILED\"] = \"SESSION_TRASFER_FAILED\";\r\n        MessageType[\"SESSION_TRANSFER_COMPLEATE\"] = \"SESSION_TRANSFER_COMPLEATE\";\r\n        MessageType[\"LOG\"] = \"LOG\";\r\n        MessageType[\"MESSAGE_ACK\"] = \"MESSAGE_ACK\";\r\n        MessageType[\"ESCALATE_TO_AGENT\"] = \"ESCALATE_TO_AGENT\";\r\n        MessageType[\"ICE_CANDIDATES\"] = \"ICE_CANDIDATES\";\r\n        MessageType[\"CONFIRMATION_ACCEPTED\"] = \"CONFIRMATION_ACCEPTED\";\r\n        MessageType[\"CONFIRMATION_REJECTED\"] = \"CONFIRMATION_REJECTED\";\r\n        MessageType[\"READY_FOR_CALL\"] = \"READY_FOR_CALL\";\r\n        MessageType[\"CALL_INITIATED\"] = \"CALL_INITIATED\";\r\n        MessageType[\"CALL_RESPONSE\"] = \"CALL_RESPONSE\";\r\n        MessageType[\"END_CALL\"] = \"END_CALL\";\r\n        MessageType[\"ON_ICE_CANDIDATES\"] = \"ON_ICE_CANDIDATES\";\r\n        MessageType[\"ROOM_ID_REQUESTED\"] = \"ROOM_ID_REQUESTED\";\r\n        MessageType[\"ON_ROOM_CREATED\"] = \"ON_ROOM_CREATED\";\r\n        MessageType[\"ON_ROOM_CREATION_FAILED\"] = \"ON_ROOM_CREATION_FAILED\";\r\n        MessageType[\"REQUEST_FOR_SUPERVISOR_CHERRY_PICK\"] = \"REQUEST_FOR_SUPERVISOR_CHERRY_PICK\";\r\n        MessageType[\"ON_SUPERVISOR_CHERRY_PICK_SUCCESS\"] = \"ON_SUPERVISOR_CHERRY_PICK_SUCCESS\";\r\n        MessageType[\"ON_SUPERVISOR_CHERRY_PICK_FAILED\"] = \"ON_SUPERVISOR_CHERRY_PICK_FAILED\";\r\n        MessageType[\"REQUEST_FOR_SUPERVISOR_RE_QUEUE\"] = \"REQUEST_FOR_SUPERVISOR_RE_QUEUE\";\r\n        MessageType[\"ON_SUPERVISOR_RE_QUEUE_SUCCESS\"] = \"ON_SUPERVISOR_RE_QUEUE_SUCCESS\";\r\n        MessageType[\"ON_SUPERVISOR_RE_QUEUE_FAILED\"] = \"ON_SUPERVISOR_RE_QUEUE_FAILED\";\r\n    })(MessageType = exports.MessageType || (exports.MessageType = {}));\r\n    /**\r\n     * CXInfinity Available Broker Types\r\n     */\r\n    var BrokerTypes;\r\n    (function (BrokerTypes) {\r\n        BrokerTypes[\"WEB_SOCKET\"] = \"WEB_SOCKET\";\r\n        BrokerTypes[\"HTTP\"] = \"HTTP\";\r\n        BrokerTypes[\"XMPP\"] = \"XMPP\";\r\n        BrokerTypes[\"WEB_RTC\"] = \"WEB_RTC\";\r\n        BrokerTypes[\"BOTTER_INFI\"] = \"BOTTER_INFI\";\r\n    })(BrokerTypes = exports.BrokerTypes || (exports.BrokerTypes = {}));\r\n    var AckResponseTypes;\r\n    (function (AckResponseTypes) {\r\n        AckResponseTypes[\"MESSAGE_RECEIVED\"] = \"MESSAGE_RECEIVED\";\r\n        AckResponseTypes[\"MESSAGE_DELEVERED\"] = \"MESSAGE_DELEVERED\";\r\n        AckResponseTypes[\"ERROR\"] = \"ERROR\";\r\n    })(AckResponseTypes = exports.AckResponseTypes || (exports.AckResponseTypes = {}));\r\n    /**\r\n     * Message broker client type\r\n     * @INDIVIDUAL , If broker client is created to handle single interaction with single client.\r\n     * @BROKER, If broker client is created to handle multiple interaction with single client.\r\n     */\r\n    var ClientType;\r\n    (function (ClientType) {\r\n        ClientType[\"INDIVIDUAL\"] = \"INDIVIDUAL\";\r\n        ClientType[\"BROKER\"] = \"BROKER\";\r\n    })(ClientType = exports.ClientType || (exports.ClientType = {}));\r\n});\r\n","define([\"require\", \"exports\", \"../../utils/ClientUtils\"], function (require, exports, ClientUtils_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.BrokerMessage = void 0;\r\n    /**\r\n     * Broker Message Template which is shared between CXInfinity broker client and CXInfinity\r\n     * signalling server.\r\n     */\r\n    class BrokerMessage {\r\n        brokerType;\r\n        sender;\r\n        messageType;\r\n        /**\r\n         *\r\n         */\r\n        messageKey;\r\n        /**\r\n         * shared data like structure @ChatMessageBody\r\n         */\r\n        data;\r\n        /**\r\n         * generated message timestamp\r\n         */\r\n        timestamp;\r\n        constructor(brokerType, sender, messageType, data) {\r\n            this.brokerType = brokerType;\r\n            this.sender = sender;\r\n            this.messageType = messageType;\r\n            this.messageKey = ClientUtils_1.ClientUtils.generateUniqueKey();\r\n            this.data = data;\r\n            this.timestamp = new Date().getTime();\r\n        }\r\n    }\r\n    exports.BrokerMessage = BrokerMessage;\r\n});\r\n","define([\"require\", \"exports\", \"../client/ClientTypes\"], function (require, exports, ClientTypes_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.DS = exports.ClientUtils = void 0;\r\n    class ClientUtils {\r\n        constructor() { }\r\n        static getSupportedMessageDataBroker() {\r\n            return [ClientTypes_1.BrokerTypes.WEB_SOCKET];\r\n        }\r\n        static getSupportedMediaBroker() {\r\n            return [ClientTypes_1.BrokerTypes.WEB_RTC, ClientTypes_1.BrokerTypes.WEB_SOCKET, ClientTypes_1.BrokerTypes.WEB_SOCKET];\r\n        }\r\n        static generateUniqueKey() {\r\n            return (Date.now().toString(36)\r\n                + Math.random().toString(36).\r\n                    substr(2, 5)).toUpperCase();\r\n        }\r\n    }\r\n    exports.ClientUtils = ClientUtils;\r\n    var DS;\r\n    (function (DS) {\r\n        class Node {\r\n            item;\r\n            next;\r\n            constructor(item = null) {\r\n                this.item = item;\r\n                this.next = null;\r\n            }\r\n        }\r\n        DS.Node = Node;\r\n    })(DS = exports.DS || (exports.DS = {}));\r\n});\r\n"],"names":[],"sourceRoot":""}